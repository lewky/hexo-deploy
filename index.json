[{"categories":["Hugo系列"],"content":"背景 本文基于LoveIt主题【v0.2.10】，且所使用的Hugo版本如下，不同版本且不同主题可能无法适用某些属性： \u003ehugo version Hugo Static Site Generator v0.74.2-48565DE6 windows/amd64 BuildDate: 2020-07-17T17:22:50Z ","date":"2020-09-25","objectID":"/posts/hugo-2.html/:1:0","tags":["Hugo","站点配置文件"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/posts/hugo-2.html/"},{"categories":["Hugo系列"],"content":"配置文件 Hugo默认使用根目录下的config.toml、config.yaml或config.json中的某一个作为站点的配置文件，可以通过--config来配置读取一个或多个配置文件，如下： hugo --config debugconfig.toml hugo --config a.toml,b.toml,c.toml ","date":"2020-09-25","objectID":"/posts/hugo-2.html/:2:0","tags":["Hugo","站点配置文件"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/posts/hugo-2.html/"},{"categories":["Hugo系列"],"content":"配置文件的目录 除了使用单一的站点配置文件，还可以通过使用configDir变量（默认值为config/）来维护不同环境下的各组件的配置文件： 每个文件各自对应配置文件的根对象，比如Params, Menus, Languages等。 每个子目录对应不同的环境配置，类似于Maven的Profile功能。 这些文件可以应用国际化功能，即区分不同的语言版本。 下面是一个简单的例子： ├── config │ ├── _default │ │ ├── config.toml │ │ ├── languages.toml │ │ ├── menus.en.toml │ │ ├── menus.zh.toml │ │ └── params.toml │ ├── production │ │ ├── config.toml │ │ └── params.toml │ └── staging │ ├── config.toml │ └── params.toml 可以发现上述的结构中，存在着三种不同的环境配置：_default默认环境、production生成环境、staging演示环境。_default下的配置是通用配置，Hugo每次生成站点时都会读取。如果运行hugo --environment staging，则还会额外合并staging的配置（会替换_default下冲突的配置）。 一般情况下我们用不到多环境的功能，只需要在站点根目录下存放一个config.toml文件，直接在该配置文件中指定各种属性，就可以实现相当程度的个性化了。下面是一些常用的配置文件的属性的用法，这些属性都是配置在站点配置文件里的。 ","date":"2020-09-25","objectID":"/posts/hugo-2.html/:3:0","tags":["Hugo","站点配置文件"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/posts/hugo-2.html/"},{"categories":["Hugo系列"],"content":"theme主题属性 配置你的Hugo主题款式，本文基于LoveIt主题【v0.2.10】，所以配置是： theme = \"LoveIt\" ","date":"2020-09-25","objectID":"/posts/hugo-2.html/:4:0","tags":["Hugo","站点配置文件"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/posts/hugo-2.html/"},{"categories":["Hugo系列"],"content":"网站路径相关的属性 ","date":"2020-09-25","objectID":"/posts/hugo-2.html/:5:0","tags":["Hugo","站点配置文件"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/posts/hugo-2.html/"},{"categories":["Hugo系列"],"content":"baseURL 网站的根路径，用法如下： baseURL = \"https://mySite.com/\" ","date":"2020-09-25","objectID":"/posts/hugo-2.html/:5:1","tags":["Hugo","站点配置文件"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/posts/hugo-2.html/"},{"categories":["Hugo系列"],"content":"disablePathToLower 是否禁止将网站路径转换成小写，建议设置成true： disablePathToLower = true ","date":"2020-09-25","objectID":"/posts/hugo-2.html/:5:2","tags":["Hugo","站点配置文件"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/posts/hugo-2.html/"},{"categories":["Hugo系列"],"content":"permalinks 生成的文章的路径，默认配置如下： [permalinks] posts = \"/:year/:month/:title/\" 这里可以使用的变量如下： :year：4位数的年份 :month：2位数的月份 :monthname：月份名字 :day：2位数的日期 :weekday：1位数，每周的第几天，星期日对应0 :weekdayname：星期几 :yearday：1到3位数，每年的第几天 :section：当前文章对应的section分类 :sections：当前文章对应的完整的section分类层次 :title：文章的标题 :slug：文章的slug，和title一样是定义在文件头里的属性，当没有定义slug时会使用title作为url :filename：文章的文件名，不包括文件扩展名。 出于seo考虑，不建议在url里加上年月日之类的，由于标题大多有中文或者特殊字符，所以也不建议直接使用标题作为url的一部分。这里建议使用slug的方式，自己手动给每篇文章提取若干个关键词作为slug，以此作为url的一部分，如下： [permalinks] posts = \"/posts/:slug.html\" 然后文章的slug可以这样配置**（permalinks是配置在站点配置文件里的，slug是配置在每篇文章的文件头里的）**： --- title: 建站日志 slug: e62c38c45 --- 我这里是因为文章是从hexo迁移过来的，hexo那边使用了abbrlink插件来生成随机且不重复的名字，为了和之前的文章url对齐就这样配置了。而hugo没有找到类似的插件，所以选择了slug来自定义url，这个功能倒是和博客园的自定义博文的url类似。 另外值得一提的是，默认用的是pretty Url的配置，所有url的末尾都有个/，而Hexo那边url末尾是没有这个/的，算是一点小小的不同。 ","date":"2020-09-25","objectID":"/posts/hugo-2.html/:5:3","tags":["Hugo","站点配置文件"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/posts/hugo-2.html/"},{"categories":["Hugo系列"],"content":"uglyurls 这个属性针对默认的pretty Url，比如有个url是/posts/e62c38c45/。如果设置了uglyurls = true，则会把末尾的/改成.html，新的url就变成了/posts/e62c38c45.html。但是这个属性有个问题，它会把文章以外的url也变成这种“丑陋”的格式，比如分类、标签等url，这样就不美观了。 所以不推荐使用该属性，如果希望文章的url不是纯目录格式的，可以像上文的permalinks那样配置。 ","date":"2020-09-25","objectID":"/posts/hugo-2.html/:5:4","tags":["Hugo","站点配置文件"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/posts/hugo-2.html/"},{"categories":["Hugo系列"],"content":"markup标记属性 配置markdown解析器、代码块高亮、文章目录等。 ","date":"2020-09-25","objectID":"/posts/hugo-2.html/:6:0","tags":["Hugo","站点配置文件"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/posts/hugo-2.html/"},{"categories":["Hugo系列"],"content":"markdown解析器 Hugo提供了asciidocExt、blackFriday和goldmark三种markdown解析器，默认使用goldmark来解析markdown，如下： markup: asciidocExt: attributes: {} backend: html5 extensions: [] failureLevel: fatal noHeaderOrFooter: true safeMode: unsafe sectionNumbers: false trace: false verbose: false workingFolderCurrent: false blackFriday: angledQuotes: false extensions: null extensionsMask: null footnoteAnchorPrefix: \"\" footnoteReturnLinkContents: \"\" fractions: true hrefTargetBlank: false latexDashes: true nofollowLinks: false noreferrerLinks: false plainIDAnchors: true skipHTML: false smartDashes: true smartypants: true smartypantsQuotesNBSP: false taskLists: true defaultMarkdownHandler: goldmark goldmark: extensions: definitionList: true footnote: true linkify: true strikethrough: true table: true taskList: true typographer: true parser: attribute: true autoHeadingID: true autoHeadingIDType: github renderer: hardWraps: false unsafe: false xhtml: false ","date":"2020-09-25","objectID":"/posts/hugo-2.html/:6:1","tags":["Hugo","站点配置文件"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/posts/hugo-2.html/"},{"categories":["Hugo系列"],"content":"Highlight代码高亮 hugo默认的配置如下： markup: highlight: anchorLineNos: false codeFences: true guessSyntax: false hl_Lines: \"\" lineAnchors: \"\" lineNoStart: 1 lineNos: false lineNumbersInTable: true noClasses: true style: monokai tabWidth: 4 guessSyntax：自动推断代码属于某种语言。 hl_Lines：仅在使用goldmark解析器时该属性才起效，表示对某几行代码进行高亮处理，比如： lineAnchors: \"2\"表示第二行代码高亮； lineAnchors: \"1-8\"表示第一到八行代码高亮； lineAnchors: \"1 3\"表示第一行和第三行代码高亮。 lineNoStart：表示行数从多少开始计数。 lineNos：配置行数，false表示不显示行数。 lineNumbersInTable：值为true时可以在显示行数时提供友好的代码块复制黏贴功能。 ","date":"2020-09-25","objectID":"/posts/hugo-2.html/:6:2","tags":["Hugo","站点配置文件"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/posts/hugo-2.html/"},{"categories":["Hugo系列"],"content":"Table Of Contents文章目录 配置如下： markup: tableOfContents: endLevel: 3 ordered: false startLevel: 2 startLevel：从几级标题开始生成目录，值为2表示从h2开始生成目录。 endLevel：到几级标题为止生成目录，值为3表示大于h3的标题就不再生成目录。 ordered：是否生成排序目录，建议启用该功能，生成的目录会更为美观。 ","date":"2020-09-25","objectID":"/posts/hugo-2.html/:6:3","tags":["Hugo","站点配置文件"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/posts/hugo-2.html/"},{"categories":["Hugo系列"],"content":"补充一个完整的toml格式的markup配置 上面分别给出了yaml格式的3种配置，下面是对应toml格式的完整配置： [markup] defaultMarkdownHandler = \"goldmark\" [markup.asciidocExt] backend = \"html5\" extensions = [] failureLevel = \"fatal\" noHeaderOrFooter = true safeMode = \"unsafe\" sectionNumbers = false trace = false verbose = false workingFolderCurrent = false [markup.asciidocExt.attributes] [markup.blackFriday] angledQuotes = false footnoteAnchorPrefix = \"\" footnoteReturnLinkContents = \"\" fractions = true hrefTargetBlank = false latexDashes = true nofollowLinks = false noreferrerLinks = false plainIDAnchors = true skipHTML = false smartDashes = true smartypants = true smartypantsQuotesNBSP = false taskLists = true [markup.goldmark] [markup.goldmark.extensions] definitionList = true footnote = true linkify = true strikethrough = true table = true taskList = true typographer = true [markup.goldmark.parser] attribute = true autoHeadingID = true autoHeadingIDType = \"github\" [markup.goldmark.renderer] hardWraps = false unsafe = false xhtml = false [markup.highlight] anchorLineNos = false codeFences = true guessSyntax = false hl_Lines = \"\" lineAnchors = \"\" lineNoStart = 1 lineNos = false lineNumbersInTable = true noClasses = true style = \"monokai\" tabWidth = 4 [markup.tableOfContents] endLevel = 3 ordered = false startLevel = 2 ","date":"2020-09-25","objectID":"/posts/hugo-2.html/:6:4","tags":["Hugo","站点配置文件"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/posts/hugo-2.html/"},{"categories":["Hugo系列"],"content":"menu菜单属性 侧边栏菜单是在配置文件里配置的，如下： [menu] [[menu.main]] identifier = \"about\" name = \"\u003ci class='fa fa-heart'\u003e\u003c/i\u003eabout hugo\" url = \"/about/\" weight = -110 [[menu.main]] identifier = \"start\" name = \"getting started\" post = \"\u003cspan class='alert'\u003eNew!\u003c/span\u003e\" pre = \"\u003ci class='fa fa-road'\u003e\u003c/i\u003e\" url = \"/getting-started/\" weight = -100 identifier的值不能重复。 weight是比重，值越小则该菜单的位置越靠上面。 name是菜单名字。 pre和post分别对应当前菜单的前缀和后缀，可以定义fontawesome等图标。 ","date":"2020-09-25","objectID":"/posts/hugo-2.html/:7:0","tags":["Hugo","站点配置文件"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/posts/hugo-2.html/"},{"categories":["Hugo系列"],"content":"languages语言属性 该属性可以提高站点的国际化功能，即区分多语言版本的站点，比如若设定了en、zh两个语言，设定默认语言是zh；则默认的站点url的根目录后会加上/zh/，并可以通过站点首页的切换语言下拉框来切换到其他语音，如：/en/。 languages一般用来跟上面的menu一起配合使用，如下： [Languages] [Languages.en] title = \"Yulin Lewis' Blog\" weight = 1 languageName = \"English\" [[Languages.en.menu.main]] name = \"\u003ci class='fab fa-fw fa-github'\u003e\u003c/i\u003e GitHub\" identifier = \"github\" url = \"https://github.com/lewky\" weight = 1 [Languages.zh] title = \"雨临Lewis的博客\" weight = 2 languageName = \"简体中文\" [[Languages.zh.menu.main]] name = \"\u003ci class='fab fa-fw fa-github'\u003e\u003c/i\u003e GitHub\" identifier = \"github\" url = \"https://github.com/lewky\" weight = 1 此外，也可以将languages和params搭配使用，用法和上面类似，其实就是在这些属性的前面加上languages前缀而已。但是不知道为什么，在本文背景里提及的hugo和LoveIt版本下，站点无法正常读取到多语言参数，比如[languages.zh-cn.params]这种属性会读取不了。 ","date":"2020-09-25","objectID":"/posts/hugo-2.html/:8:0","tags":["Hugo","站点配置文件"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/posts/hugo-2.html/"},{"categories":["Hugo系列"],"content":"minify压缩属性 该属性用于压缩站点的各种静态资源，比如html、css、json、xml等，官方的默认配置如下： [minify] disableCSS = false disableHTML = false disableJS = false disableJSON = false disableSVG = false disableXML = false minifyOutput = false [minify.tdewolff] [minify.tdewolff.css] decimals = -1 keepCSS2 = true [minify.tdewolff.html] keepConditionalComments = true keepDefaultAttrVals = true keepDocumentTags = true keepEndTags = true keepQuotes = false keepWhitespace = false [minify.tdewolff.js] [minify.tdewolff.json] [minify.tdewolff.svg] decimals = -1 [minify.tdewolff.xml] keepWhitespace = false 但实际上在配置文件中加入上述的配置并没有效果，也无法进行修改，这可能是个bug，因为和启用压缩的命令参数冲突了。不过从上面的配置可以看出，hugo自带的压缩功能是默认会压缩CSS、HTML、JS、JSON、SVG、XML；并且在压缩HTML的时候会保留注释、属性、文档标签和闭合标签，但是会去掉引号和空格。 如果想启用压缩功能，可以运行如下命令（记得运行前要先删掉public目录）： hugo --minify 也可以直接把这个参数配置到配置文件中，这样就可以不在运行命令时指定压缩参数： minify = true ","date":"2020-09-25","objectID":"/posts/hugo-2.html/:9:0","tags":["Hugo","站点配置文件"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/posts/hugo-2.html/"},{"categories":["Hugo系列"],"content":"参考链接 Configure Hugo Syntax Highlighting Menus Multilingual Mode ","date":"2020-09-25","objectID":"/posts/hugo-2.html/:10:0","tags":["Hugo","站点配置文件"],"title":"Hugo系列(2) - 通过配置文件来定制个人站点","uri":"/posts/hugo-2.html/"},{"categories":["Hugo系列"],"content":"背景 使用Hexo搭建个人博客也有两年多时间了，当文章数量达到上百篇之后，开始发现Hexo生成文章的效率越来越慢，直到每次生成都需要至少五分钟的时间。我发现生成效率和文章涉及到的分类和标签有很大关系，由于文章数量多，每篇文章又都关联了若干个分类和标签，再加上我使用了压缩样式的插件，最终导致极其低下的生成效率。 在经过一段时间的考量后，决定将Hexo博客迁移到Hugo。Hugo是用go语言开发的，在用法上和Hexo类似，可以简单地把Hugo当成go语言版的Hexo，但是它拥有更快的生成效率。下面是官网的原话： The world’s fastest framework for building websites Hugo is one of the most popular open-source static site generators. With its amazing speed and flexibility, Hugo makes building websites fun again. ","date":"2020-09-06","objectID":"/posts/hugo-1.html/:1:0","tags":["Hugo","简单入门"],"title":"Hugo系列(1) - 简单搭建与部署","uri":"/posts/hugo-1.html/"},{"categories":["Hugo系列"],"content":"安装 和Hexo不同，Hugo安装非常简单，只需要去Hugo Release下载操作系统对应的二进制文件即可（hugo或者hugo.exe)。 对于Windows平台，一般是一个zip文件，解压后里面有个hugo.exe文件。将该文件所在目录添加到环境变量path里，即可在cmd里通过hugo version检测是否能正常运行hugo命令。 如下是我安装的hugo版本： \u003ehugo version Hugo Static Site Generator v0.74.2-48565DE6 windows/amd64 BuildDate: 2020-07-17T17:22:50Z 其他平台的安装方法可以参考官方文档：Install Hugo ","date":"2020-09-06","objectID":"/posts/hugo-1.html/:2:0","tags":["Hugo","简单入门"],"title":"Hugo系列(1) - 简单搭建与部署","uri":"/posts/hugo-1.html/"},{"categories":["Hugo系列"],"content":"创建站点 首先需要创建一个新的个人站点： hugo new site blog blog就是你的博客站点所在的目录，也是这个站点的根目录，创建站点后目录结构如下： archetypes/ content/ data/ layouts/ static/ themes/ config.toml 下面简单介绍下Hugo根目录下的各个文件目录的作用： archetypes存放创建文件时使用的模板，可以自定义front matter属性。 assets存放需要被Hugo Pipes处理的文件，且只有使用了.Permalink或者.RelPermalink的文件才能被发布到public目录。 注意，默认不会创建assets目录。 config是配置文件，可以有JSON、 YAML或者TOML三种格式，默认使用根目录下的config.toml、config.yaml或config.json中的某一个。可以通过--config来配置读取一个或多个配置文件，如：hugo --config a.toml,b.toml,c.toml。 注意，默认不会创建config目录。 content存放的各种md文件用于部署站点，该目录下可以自行创建若干个子目录来便于对文章进行分类，这些子目录被称为section。 data目录存放的是用于定义变量的模板文件，相当于Java里的常量类，这些文件有JSON、 YAML或者TOML三种格式，会在生成站点时被使用到。一般用不到该功能，具体用法可以参考：data templates layouts目录存放的模板文件用于渲染html页面，模板里可以定义不同页面的html代码。 static目录存放的是静态内容：图片、CSS、JavaScript等。 resources目录用于缓存某些文件来提高生成效率。 注意，默认不会创建resources目录。 ","date":"2020-09-06","objectID":"/posts/hugo-1.html/:3:0","tags":["Hugo","简单入门"],"title":"Hugo系列(1) - 简单搭建与部署","uri":"/posts/hugo-1.html/"},{"categories":["Hugo系列"],"content":"添加主题 为新站点添加一个主题，以我使用的LoveIt主题为例，先将主题代码放置到themes目录下： cd blog git init git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt 接着修改config.toml： theme = \"LoveIt\" 这里的LoveIt对应themes目录下的主题的文件夹名字。 ","date":"2020-09-06","objectID":"/posts/hugo-1.html/:4:0","tags":["Hugo","简单入门"],"title":"Hugo系列(1) - 简单搭建与部署","uri":"/posts/hugo-1.html/"},{"categories":["Hugo系列"],"content":"新建文章 新建一篇文章： hugo new posts/first.md 该命令会在content/posts目录下生成first.md文件，打开进行编辑： --- title: \"First\" date: 2020-09-08T21:57:28+08:00 draft: true --- ## First First blog. 两行---里的属性是front matter，用来设置当前文章的属性配置。front matter的内容可以使用3种不同的格式来定义，两行---之间对应的是YAML格式，两行+++之间对应的是TOML格式，{和}之间对应的是JSON格式。 建议用YAML格式来定义，这样从Hexo迁移到Hugo的成本会更低。 下面是官方文档提供的3种不同格式的front matter的样例，有兴趣的可以了解下。 ","date":"2020-09-06","objectID":"/posts/hugo-1.html/:5:0","tags":["Hugo","简单入门"],"title":"Hugo系列(1) - 简单搭建与部署","uri":"/posts/hugo-1.html/"},{"categories":["Hugo系列"],"content":"TOML Example +++ title = \"spf13-vim 3.0 release and new website\" description = \"spf13-vim is a cross platform distribution of vim plugins and resources for Vim.\" tags = [ \".vimrc\", \"plugins\", \"spf13-vim\", \"vim\" ] date = \"2012-04-06\" categories = [ \"Development\", \"VIM\" ] slug = \"spf13-vim-3-0-release-and-new-website\" +++ Content of the file goes Here ","date":"2020-09-06","objectID":"/posts/hugo-1.html/:5:1","tags":["Hugo","简单入门"],"title":"Hugo系列(1) - 简单搭建与部署","uri":"/posts/hugo-1.html/"},{"categories":["Hugo系列"],"content":"YAML Example --- title: \"spf13-vim 3.0 release and new website\" description: \"spf13-vim is a cross platform distribution of vim plugins and resources for Vim.\" tags: [ \".vimrc\", \"plugins\", \"spf13-vim\", \"vim\" ] lastmod: 2015-12-23 date: \"2012-04-06\" categories: - \"Development\" - \"VIM\" slug: \"spf13-vim-3-0-release-and-new-website\" --- Content of the file goes Here ","date":"2020-09-06","objectID":"/posts/hugo-1.html/:5:2","tags":["Hugo","简单入门"],"title":"Hugo系列(1) - 简单搭建与部署","uri":"/posts/hugo-1.html/"},{"categories":["Hugo系列"],"content":"JSON Example { \"title\": \"spf13-vim 3.0 release and new website\", \"description\": \"spf13-vim is a cross platform distribution of vim plugins and resources for Vim.\", \"tags\": [ \".vimrc\", \"plugins\", \"spf13-vim\", \"vim\" ], \"date\": \"2012-04-06\", \"categories\": [ \"Development\", \"VIM\" ], \"slug\": \"spf13-vim-3-0-release-and-new-website\", } Content of the file goes Here ","date":"2020-09-06","objectID":"/posts/hugo-1.html/:5:3","tags":["Hugo","简单入门"],"title":"Hugo系列(1) - 简单搭建与部署","uri":"/posts/hugo-1.html/"},{"categories":["Hugo系列"],"content":"启动Hugo服务 输入命令： hugo server -D 在本地启动服务后可以在 http://localhost:1313/ 访问个人站点。该命令仅用于本地调试，支持热修改，也就是说在启动服务时修改文章会实时生效，但是该命令不会真正生成静态文件。 ","date":"2020-09-06","objectID":"/posts/hugo-1.html/:6:0","tags":["Hugo","简单入门"],"title":"Hugo系列(1) - 简单搭建与部署","uri":"/posts/hugo-1.html/"},{"categories":["Hugo系列"],"content":"生成静态页面 输入命令： hugo -D 默认会在站点根目录的public/目录下生成对应的静态页面，可以通过在命令行指定-d或者--destination参数来改变静态页面的存放路径，也可以通过在配置文件中设置publishDir来指定。 该命令生成的静态页面文件是用来部署到pages服务的，比如GitHub pages或者Coding pages等。 另外，hugo允许对生成的静态页面设置特殊的参数，比如在文章的front matter里设置参数：draft, publishdate和expirydate。如下： --- title: \"First\" date: 2020-09-08T21:57:28+08:00 draft: true publishdate: 2020-09-18T21:57:28+08:00 expirydate: 2020-09-28T21:57:28+08:00 --- draft: true表明该文章是草稿，如果在启用服务时不指定参数-D或--buildDrafts，或者在配置文件config.toml中配置buildDrafts = true，则会在生成文章时忽略草稿。如果不想指定该参数就生成文章，需要改为draft: false或者将其删去。 publishdate: 2020-09-18T21:57:28+08:00表示将来发布的时间，如果不指定参数-F或--buildFuture，或者在配置文件config.toml中配置buildFuture = true，则无法在规定的日期之前生成该文章。 expirydate: 2020-09-28T21:57:28+08:00表示过期时间，如果不指定参数-E或--buildExpired，或者在配置文件config.toml中配置buildExpired = true，则无法在规定的日期之后生成该文章。 ","date":"2020-09-06","objectID":"/posts/hugo-1.html/:7:0","tags":["Hugo","简单入门"],"title":"Hugo系列(1) - 简单搭建与部署","uri":"/posts/hugo-1.html/"},{"categories":["Hugo系列"],"content":"远程部署到Pages服务 Hugo和Hexo一样是静态站点生成工具，不需要服务器即可进行部署运行，为了可以在网络上也访问到我们的博客，需要将静态博客部署到某些网站的pages服务上，借用人家的服务器进行托管。 常用的page服务有GitHub pages、Coding pages等，由于暂时没有找到好用的Hugo的远程部署插件，所以这里使用git命令来进行远程部署。 ","date":"2020-09-06","objectID":"/posts/hugo-1.html/:8:0","tags":["Hugo","简单入门"],"title":"Hugo系列(1) - 简单搭建与部署","uri":"/posts/hugo-1.html/"},{"categories":["Hugo系列"],"content":"参考链接 Hugo Front Matter Hugo Quick Start Install Hugo Directory Structure Explained ","date":"2020-09-06","objectID":"/posts/hugo-1.html/:9:0","tags":["Hugo","简单入门"],"title":"Hugo系列(1) - 简单搭建与部署","uri":"/posts/hugo-1.html/"},{"categories":["建站日志"],"content":"Siting Log o(*￣▽￣*)ブ 持续更新中 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:0:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-12-19 最近发现打开页面略慢略卡，发现是jquery-backstretch的cdn加载不了，原本官网使用的cdn是cloudflare的，现在改成了另一个cdn地址。 于是将jquery-backstretch的cdn修改了官网上最新的，总算变快了。 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:1:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-11-16 将鼠标点击产生的文字设为不可选定 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:2:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-11-10 解决在适配手机屏幕时，页面右上角的GitHub彩带被覆盖掉的问题。 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:3:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-09-18 添加了图片懒加载插件hexo-lazyload-image 出于强迫症，还是关闭了不蒜子的统计功能，目的是为了解决下边的问题二。 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:4:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-08-21 最近发现了两个问题： 如果文章不写小标题，是不会生成文章目录的，如果启用了leancloud的阅读计数功能，这时候这篇文章的阅读页面的侧边栏就会失去affix.js的固定定位效果；(该bug在火狐浏览器下偶尔会触发，在360浏览器下百分百触发) 如果启用了不蒜子计数，在360浏览器下如果滚动页面时，侧边栏的底部无法和正文模块的底部持平，侧边栏底部会比正文模块的短一些。该问题在火狐浏览器下不存在。 解决方案： 问题一需要给每篇文章都起至少一个小标题，这样就会自动生成文章目录，也就不存在这个问题了。 也可以选择关闭leancloud的阅读计数功能，重新生成静态页面就行了。 问题二对于强迫症来说很难受，要么关闭不蒜子计数，要么不使用360浏览器。 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:5:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-08-18 修改了hexo-neat的压缩选项，优化页面的加载 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:6:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-08-17 添加了新的b站头像挂件 添加头像挂件自动刷新功能 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:7:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-08-14 去掉了文本首行缩进，首行缩进有个问题：当一个段落内存在换行时，比如使用\u003cbr\u003e，会导致换行后无法缩进，不太好看；找了好久也没找到解决的方法，只能取消文本的首行缩进了。 如果需要首行缩进还是自己手动添加\u0026emsp;\u0026emsp;(全角空格，即对应两个中文空格)…… ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:8:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-07-30 修改categories page的样式 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:9:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-07-26 改善文章目录的换行问题 添加文章不在首页显示的功能：在文件头里添加not_show: true即可启用 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:10:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-07-21 添加了404页面 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:11:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-07-19 修改代码块diff样式 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:12:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-07-10 修改文本标题样式 文本首行缩进两个字符 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:13:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-07-07 添加网页标题监听事件 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:14:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-06-30 代码块添加复制按钮 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:15:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-06-25 修改about页面 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:16:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-06-20 使用 hexo-neat 压缩博文插件，优化博客静态资源 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:17:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-06-16 添加 Font Awesome 4.6.2的CDN，支持使用font awesome4或5 友情链接里添加恶搞页面 关于页面添加站点运行时间 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:18:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-06-16 修改阅读全文按钮样式 页脚爱心图形动画 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:19:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-06-16 修改站点标题样式 修改页脚样式 添加站点背景图片轮播 文章摘要添加标签 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:20:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-06-14 修改文章标签样式 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:21:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-06-12 使用 sitemap 和 baidusitemap ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:22:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-06-10 改用来必力作为评论系统 修改鼠标指针 修改引用块样式 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:23:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-06-07 添加友链并修改其样式 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:24:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-06-06 启用 Gitment ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:25:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-06-05 开启文章目录显示功能，替换掉显示错误的FontAwesome图标 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:26:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-06-04 CDN有时候加载比较慢，所以去掉原本引入的 Font Awesome 4 和 Font Awesome Free CDN，直接将下载好的 Font Awesome 5 解压复制到 lib 目录下 这里吐槽一下，由于 Font Awesome 从版本4升级到5修改了很多图标的名称，所以我花了一个多小时的时间去一个个替换这些改动的图标，累死… ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:27:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-06-03 添加头像旋转 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:28:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-06-01 去掉脚注超链的底部线条 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:29:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-05-31 添加 custom.js 文件 添加鼠标点击文字特效 添加头像挂件点击事件 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:30:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-05-30 设置文章摘要里的图片的最大宽度 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:31:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-05-27 缩小文章摘要里标题和正文的间距 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:32:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-05-25 修改预格式代码块(用tab键插入的代码块)的样式 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:33:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-05-17 重新修改了头像挂件样式 修改站点标题样式 修改菜单栏样式 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:34:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-05-16 将头部彩带图片保存到本地，避免因无法通过访问该图片(被墙)而显示不出来 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:35:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-05-14 修改头像样式并添加了头像挂件(可耻地偷了波b站的头像挂件) ( ゜- ゜)つロ 重修修改了加密文章的js代码，并将文章超链的打开方式复原 (눈_눈) ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:36:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-05-13 修改文章超链的打开方式，添加文章置顶功能 修改字体大小，关闭文章目录显示序号功能 添加 by-nc-sa 许可协议，回到顶部按钮显示百分比 修改文章内的超链样式、行内代码块的样式、回到顶部按钮样式 启用搜索功能、顶部加载条 去掉图片边框 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:37:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-05-12 文章启用字数统计、阅读时长，修改其显示的样式 使用 Font Awesome Free CDN ( upgrade from version 4 to 5 ) 添加文章加密功能 指定 Markdown 的解析器 修改 Hexo 永久链接的默认格式 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:38:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-05-11 页面右上角添加 Fork me on GitHub ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:39:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-05-09 修改 scaffolds 目录下的 post/draft.md 模板，并添加自定义的模板文件 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:40:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-05-07 首页文章显示预览，添加字数统计和阅读时长 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:41:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-05-01 添加建站日志 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:42:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-04-30 启用 tags 和 categories 菜单 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:43:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-04-24 使用 Hexo 搭建个人博客 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:44:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"}]