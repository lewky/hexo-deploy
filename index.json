[{"categories":["饮食"],"content":"食材 适量面条，3颗蘑菇，1个番茄，1根火腿，1-2个鸡蛋，一把青菜 ","date":"2020-10-13","objectID":"/posts/%E5%B0%8F%E7%99%BD%E5%AD%A6%E5%81%9A%E8%8F%9C1-%E7%95%AA%E8%8C%84%E7%82%92%E9%9D%A2.html/:1:0","tags":["做菜","面食"],"title":"小白学做菜(1) - 番茄炒面","uri":"/posts/%E5%B0%8F%E7%99%BD%E5%AD%A6%E5%81%9A%E8%8F%9C1-%E7%95%AA%E8%8C%84%E7%82%92%E9%9D%A2.html/"},{"categories":["饮食"],"content":"调料 生抽、老抽、香油（芝麻油）、白糖、番茄酱、葱姜蒜 ","date":"2020-10-13","objectID":"/posts/%E5%B0%8F%E7%99%BD%E5%AD%A6%E5%81%9A%E8%8F%9C1-%E7%95%AA%E8%8C%84%E7%82%92%E9%9D%A2.html/:2:0","tags":["做菜","面食"],"title":"小白学做菜(1) - 番茄炒面","uri":"/posts/%E5%B0%8F%E7%99%BD%E5%AD%A6%E5%81%9A%E8%8F%9C1-%E7%95%AA%E8%8C%84%E7%82%92%E9%9D%A2.html/"},{"categories":["饮食"],"content":"步骤 开水下锅，面条煮到八分熟（想煮快点可以在水开时加入小部分冷水） 准备凉开水或冰水，用来浸泡面条以提升口感 准备调料： 1勺生抽 半勺老抽 半勺香油 半勺白糖提鲜 1勺番茄酱 面条里加入调料并拌匀 3颗蘑菇切片、一根火腿切片、葱姜蒜切碎、一个番茄切块（无需去皮） 用1-2个鸡蛋打成液，热锅加油，用小火炒成鸡蛋碎，备用 煎炸火腿，炒熟备用，留下底油 葱姜蒜爆香，加入番茄炒软，加入1勺生抽和1勺耗油，再加入香菇片炒软 接着放拌好的面条，放入炒好的鸡蛋碎、青菜、煎好的火腿，再炒匀即可 ","date":"2020-10-13","objectID":"/posts/%E5%B0%8F%E7%99%BD%E5%AD%A6%E5%81%9A%E8%8F%9C1-%E7%95%AA%E8%8C%84%E7%82%92%E9%9D%A2.html/:3:0","tags":["做菜","面食"],"title":"小白学做菜(1) - 番茄炒面","uri":"/posts/%E5%B0%8F%E7%99%BD%E5%AD%A6%E5%81%9A%E8%8F%9C1-%E7%95%AA%E8%8C%84%E7%82%92%E9%9D%A2.html/"},{"categories":["饮食"],"content":"电磁炉做法 ","date":"2020-10-13","objectID":"/posts/%E5%B0%8F%E7%99%BD%E5%AD%A6%E5%81%9A%E8%8F%9C1-%E7%95%AA%E8%8C%84%E7%82%92%E9%9D%A2.html/:4:0","tags":["做菜","面食"],"title":"小白学做菜(1) - 番茄炒面","uri":"/posts/%E5%B0%8F%E7%99%BD%E5%AD%A6%E5%81%9A%E8%8F%9C1-%E7%95%AA%E8%8C%84%E7%82%92%E9%9D%A2.html/"},{"categories":["饮食"],"content":"个人心得 上面的步骤是家庭小灶的做法，下面是博主个人用电磁炉的做法心得： 凉开水不能泡太久面条，简单过一遍就行，否则面条会过度发胀变软。 个人不喜欢双汇火腿，虽然很容易剥开包装，但是会有一股扑面而来的淀粉味，直接水煮的话感觉味道并不好，煎炸才会味道好些。 炒鸡蛋碎的时候还是要在搅拌鸡蛋液时加点盐，不然没味道。 番茄不能炒太久，否则会变得更酸。炒之前先用热水泡一会，炒番茄的时候建议加一些番茄酱和白糖中和酸味。 青菜要先炒熟，在电磁炉锅里开水加盐30秒后再下青菜炒熟（煮熟）。考虑到装盘问题，炒青菜这一步要在葱姜蒜爆香和炒番茄之前。 ","date":"2020-10-13","objectID":"/posts/%E5%B0%8F%E7%99%BD%E5%AD%A6%E5%81%9A%E8%8F%9C1-%E7%95%AA%E8%8C%84%E7%82%92%E9%9D%A2.html/:4:1","tags":["做菜","面食"],"title":"小白学做菜(1) - 番茄炒面","uri":"/posts/%E5%B0%8F%E7%99%BD%E5%AD%A6%E5%81%9A%E8%8F%9C1-%E7%95%AA%E8%8C%84%E7%82%92%E9%9D%A2.html/"},{"categories":["饮食"],"content":"步骤 下面是改良后的电磁炉做法步骤： 开水下锅，面条煮到八分熟 热水泡下洗净后的番茄 准备凉开水或冰水，简单过一下面条 准备调料： 1勺生抽 半勺老抽 半勺香油 半勺白糖提鲜 1勺番茄酱 面条里加入调料并拌匀 3颗蘑菇切片、一根火腿切片、葱姜蒜切碎、一个番茄切块（无需去皮） 电磁炉锅里开水加油加盐30秒后再下青菜炒熟（煮熟），装盘备用 用1-2个鸡蛋打成液，加入少量盐搅拌均匀，热锅加油，用小火炒成鸡蛋碎，备用 煎炸火腿，炒熟备用，留下底油 葱姜蒜爆香，加入番茄炒软，加入1勺生抽、1勺耗油、1勺番茄酱，再加入香菇片炒软 接着放拌好的面条，放入炒好的鸡蛋碎和青菜、煎好的火腿，再炒匀即可 切记全程要控制油温，如果温度太高，油遇水会溅射，关键在于水是否沸腾了，水一旦沸腾就会气化造成油飞溅。 ","date":"2020-10-13","objectID":"/posts/%E5%B0%8F%E7%99%BD%E5%AD%A6%E5%81%9A%E8%8F%9C1-%E7%95%AA%E8%8C%84%E7%82%92%E9%9D%A2.html/:4:2","tags":["做菜","面食"],"title":"小白学做菜(1) - 番茄炒面","uri":"/posts/%E5%B0%8F%E7%99%BD%E5%AD%A6%E5%81%9A%E8%8F%9C1-%E7%95%AA%E8%8C%84%E7%82%92%E9%9D%A2.html/"},{"categories":["饮食"],"content":"参考链接 吃一次就上瘾的的番茄炒面！！我吃哭了 心目中懒人炒面排行第一！ ","date":"2020-10-13","objectID":"/posts/%E5%B0%8F%E7%99%BD%E5%AD%A6%E5%81%9A%E8%8F%9C1-%E7%95%AA%E8%8C%84%E7%82%92%E9%9D%A2.html/:5:0","tags":["做菜","面食"],"title":"小白学做菜(1) - 番茄炒面","uri":"/posts/%E5%B0%8F%E7%99%BD%E5%AD%A6%E5%81%9A%E8%8F%9C1-%E7%95%AA%E8%8C%84%E7%82%92%E9%9D%A2.html/"},{"categories":["Hugo系列"],"content":"背景 本文基于LoveIt主题【v0.2.10】，且所使用的Hugo版本如下，不同版本且不同主题可能无法适用某些属性： \u003ehugo version Hugo Static Site Generator v0.74.2-48565DE6 windows/amd64 BuildDate: 2020-07-17T17:22:50Z ","date":"2020-10-10","objectID":"/posts/hugo-3.html/:1:0","tags":["Hugo","个性化配置"],"title":"Hugo系列(3) - 通过配置文件来定制个人站点","uri":"/posts/hugo-3.html/"},{"categories":["Hugo系列"],"content":"配置文件 Hugo默认使用根目录下的config.toml、config.yaml或config.json中的某一个作为站点的配置文件，可以通过--config来配置读取一个或多个配置文件，如下： hugo --config debugconfig.toml hugo --config a.toml,b.toml,c.toml ","date":"2020-10-10","objectID":"/posts/hugo-3.html/:2:0","tags":["Hugo","个性化配置"],"title":"Hugo系列(3) - 通过配置文件来定制个人站点","uri":"/posts/hugo-3.html/"},{"categories":["Hugo系列"],"content":"配置文件的目录 除了使用单一的站点配置文件，还可以通过使用configDir变量（默认值为config/）来维护不同环境下的各组件的配置文件： 每个文件各自对应配置文件的根对象，比如Params, Menus, Languages等。 每个子目录对应不同的环境配置，类似于Maven的Profile功能。 这些文件可以应用国际化功能，即区分不同的语言版本。 下面是一个简单的例子： ├── config │ ├── _default │ │ ├── config.toml │ │ ├── languages.toml │ │ ├── menus.en.toml │ │ ├── menus.zh.toml │ │ └── params.toml │ ├── production │ │ ├── config.toml │ │ └── params.toml │ └── staging │ ├── config.toml │ └── params.toml 可以发现上述的结构中，存在着三种不同的环境配置：_default默认环境、production生成环境、staging演示环境。_default下的配置是通用配置，Hugo每次生成站点时都会读取。如果运行hugo --environment staging，则还会额外合并staging的配置（会替换_default下冲突的配置）。 一般情况下我们用不到多环境的功能，只需要在站点根目录下存放一个config.toml文件，直接在该配置文件中指定各种属性，就可以实现相当程度的个性化了。下面是一些常用的配置文件的属性的用法，这些属性都是配置在站点配置文件里的。 ","date":"2020-10-10","objectID":"/posts/hugo-3.html/:3:0","tags":["Hugo","个性化配置"],"title":"Hugo系列(3) - 通过配置文件来定制个人站点","uri":"/posts/hugo-3.html/"},{"categories":["Hugo系列"],"content":"theme主题属性 配置你的Hugo主题款式，本文基于LoveIt主题【v0.2.10】，所以配置是： theme = \"LoveIt\" ","date":"2020-10-10","objectID":"/posts/hugo-3.html/:4:0","tags":["Hugo","个性化配置"],"title":"Hugo系列(3) - 通过配置文件来定制个人站点","uri":"/posts/hugo-3.html/"},{"categories":["Hugo系列"],"content":"网站路径相关的属性 ","date":"2020-10-10","objectID":"/posts/hugo-3.html/:5:0","tags":["Hugo","个性化配置"],"title":"Hugo系列(3) - 通过配置文件来定制个人站点","uri":"/posts/hugo-3.html/"},{"categories":["Hugo系列"],"content":"baseURL 网站的根路径，用法如下： baseURL = \"https://mySite.com/\" ","date":"2020-10-10","objectID":"/posts/hugo-3.html/:5:1","tags":["Hugo","个性化配置"],"title":"Hugo系列(3) - 通过配置文件来定制个人站点","uri":"/posts/hugo-3.html/"},{"categories":["Hugo系列"],"content":"disablePathToLower 是否禁止将网站路径转换成小写，建议设置成true： disablePathToLower = true ","date":"2020-10-10","objectID":"/posts/hugo-3.html/:5:2","tags":["Hugo","个性化配置"],"title":"Hugo系列(3) - 通过配置文件来定制个人站点","uri":"/posts/hugo-3.html/"},{"categories":["Hugo系列"],"content":"permalinks 生成的文章的路径，默认配置如下： [permalinks] posts = \"/:year/:month/:title/\" 这里可以使用的变量如下： :year：4位数的年份 :month：2位数的月份 :monthname：月份名字 :day：2位数的日期 :weekday：1位数，每周的第几天，星期日对应0 :weekdayname：星期几 :yearday：1到3位数，每年的第几天 :section：当前文章对应的section分类 :sections：当前文章对应的完整的section分类层次 :title：文章的标题 :slug：文章的slug，和title一样是定义在文件头里的属性，当没有定义slug时会使用title作为url :filename：文章的文件名，不包括文件扩展名。 出于seo考虑，不建议在url里加上年月日之类的，由于标题大多有中文或者特殊字符，所以也不建议直接使用标题作为url的一部分。这里建议使用slug的方式，自己手动给每篇文章提取若干个关键词作为slug，以此作为url的一部分，如下： [permalinks] posts = \"/posts/:slug.html\" 然后文章的slug可以这样配置**（permalinks是配置在站点配置文件里的，slug是配置在每篇文章的文件头里的）**： --- title: 建站日志 slug: e62c38c45 --- 我这里是因为文章是从hexo迁移过来的，hexo那边使用了abbrlink插件来生成随机且不重复的名字，为了和之前的文章url对齐就这样配置了。而hugo没有找到类似的插件，所以选择了slug来自定义url，这个功能倒是和博客园的自定义博文的url类似。 另外值得一提的是，默认用的是pretty Url的配置，所有url的末尾都有个/，而Hexo那边url末尾是没有这个/的，算是一点小小的不同。 ","date":"2020-10-10","objectID":"/posts/hugo-3.html/:5:3","tags":["Hugo","个性化配置"],"title":"Hugo系列(3) - 通过配置文件来定制个人站点","uri":"/posts/hugo-3.html/"},{"categories":["Hugo系列"],"content":"uglyurls 这个属性针对默认的pretty Url，比如有个url是/posts/e62c38c45/。如果设置了uglyurls = true，则会把末尾的/改成.html，新的url就变成了/posts/e62c38c45.html。但是这个属性有个问题，它会把文章以外的url也变成这种“丑陋”的格式，比如分类、标签等url，这样就不美观了。 所以不推荐使用该属性，如果希望文章的url不是纯目录格式的，可以像上文的permalinks那样配置。 ","date":"2020-10-10","objectID":"/posts/hugo-3.html/:5:4","tags":["Hugo","个性化配置"],"title":"Hugo系列(3) - 通过配置文件来定制个人站点","uri":"/posts/hugo-3.html/"},{"categories":["Hugo系列"],"content":"markup标记属性 配置markdown解析器、代码块高亮、文章目录等。 ","date":"2020-10-10","objectID":"/posts/hugo-3.html/:6:0","tags":["Hugo","个性化配置"],"title":"Hugo系列(3) - 通过配置文件来定制个人站点","uri":"/posts/hugo-3.html/"},{"categories":["Hugo系列"],"content":"markdown解析器 Hugo提供了asciidocExt、blackFriday和goldmark三种markdown解析器，默认使用goldmark来解析markdown，如下： markup: asciidocExt: attributes: {} backend: html5 extensions: [] failureLevel: fatal noHeaderOrFooter: true safeMode: unsafe sectionNumbers: false trace: false verbose: false workingFolderCurrent: false blackFriday: angledQuotes: false extensions: null extensionsMask: null footnoteAnchorPrefix: \"\" footnoteReturnLinkContents: \"\" fractions: true hrefTargetBlank: false latexDashes: true nofollowLinks: false noreferrerLinks: false plainIDAnchors: true skipHTML: false smartDashes: true smartypants: true smartypantsQuotesNBSP: false taskLists: true defaultMarkdownHandler: goldmark goldmark: extensions: definitionList: true footnote: true linkify: true strikethrough: true table: true taskList: true typographer: true parser: attribute: true autoHeadingID: true autoHeadingIDType: github renderer: hardWraps: false unsafe: false xhtml: false ","date":"2020-10-10","objectID":"/posts/hugo-3.html/:6:1","tags":["Hugo","个性化配置"],"title":"Hugo系列(3) - 通过配置文件来定制个人站点","uri":"/posts/hugo-3.html/"},{"categories":["Hugo系列"],"content":"Highlight代码高亮 hugo默认的配置如下： markup: highlight: anchorLineNos: false codeFences: true guessSyntax: false hl_Lines: \"\" lineAnchors: \"\" lineNoStart: 1 lineNos: false lineNumbersInTable: true noClasses: true style: monokai tabWidth: 4 guessSyntax：自动推断代码属于某种语言。 hl_Lines：仅在使用goldmark解析器时该属性才起效，表示对某几行代码进行高亮处理，比如： lineAnchors: \"2\"表示第二行代码高亮； lineAnchors: \"1-8\"表示第一到八行代码高亮； lineAnchors: \"1 3\"表示第一行和第三行代码高亮。 lineNoStart：表示行数从多少开始计数。 lineNos：配置行数，false表示不显示行数。 lineNumbersInTable：值为true时可以在显示行数时提供友好的代码块复制黏贴功能。 ","date":"2020-10-10","objectID":"/posts/hugo-3.html/:6:2","tags":["Hugo","个性化配置"],"title":"Hugo系列(3) - 通过配置文件来定制个人站点","uri":"/posts/hugo-3.html/"},{"categories":["Hugo系列"],"content":"Table Of Contents文章目录 配置如下： markup: tableOfContents: endLevel: 3 ordered: false startLevel: 2 startLevel：从几级标题开始生成目录，值为2表示从h2开始生成目录。 endLevel：到几级标题为止生成目录，值为3表示大于h3的标题就不再生成目录。 ordered：是否生成排序目录，建议启用该功能，生成的目录会更为美观。 ","date":"2020-10-10","objectID":"/posts/hugo-3.html/:6:3","tags":["Hugo","个性化配置"],"title":"Hugo系列(3) - 通过配置文件来定制个人站点","uri":"/posts/hugo-3.html/"},{"categories":["Hugo系列"],"content":"补充一个完整的toml格式的markup配置 上面分别给出了yaml格式的3种配置，下面是对应toml格式的完整配置： [markup] defaultMarkdownHandler = \"goldmark\" [markup.asciidocExt] backend = \"html5\" extensions = [] failureLevel = \"fatal\" noHeaderOrFooter = true safeMode = \"unsafe\" sectionNumbers = false trace = false verbose = false workingFolderCurrent = false [markup.asciidocExt.attributes] [markup.blackFriday] angledQuotes = false footnoteAnchorPrefix = \"\" footnoteReturnLinkContents = \"\" fractions = true hrefTargetBlank = false latexDashes = true nofollowLinks = false noreferrerLinks = false plainIDAnchors = true skipHTML = false smartDashes = true smartypants = true smartypantsQuotesNBSP = false taskLists = true [markup.goldmark] [markup.goldmark.extensions] definitionList = true footnote = true linkify = true strikethrough = true table = true taskList = true typographer = true [markup.goldmark.parser] attribute = true autoHeadingID = true autoHeadingIDType = \"github\" [markup.goldmark.renderer] hardWraps = false unsafe = false xhtml = false [markup.highlight] anchorLineNos = false codeFences = true guessSyntax = false hl_Lines = \"\" lineAnchors = \"\" lineNoStart = 1 lineNos = false lineNumbersInTable = true noClasses = true style = \"monokai\" tabWidth = 4 [markup.tableOfContents] endLevel = 3 ordered = false startLevel = 2 ","date":"2020-10-10","objectID":"/posts/hugo-3.html/:6:4","tags":["Hugo","个性化配置"],"title":"Hugo系列(3) - 通过配置文件来定制个人站点","uri":"/posts/hugo-3.html/"},{"categories":["Hugo系列"],"content":"menu菜单属性 侧边栏菜单是在配置文件里配置的，如下： [menu] [[menu.main]] identifier = \"about\" name = \"\u003ci class='fa fa-heart'\u003e\u003c/i\u003eabout hugo\" url = \"/about/\" weight = -110 [[menu.main]] identifier = \"start\" name = \"getting started\" post = \"\u003cspan class='alert'\u003eNew!\u003c/span\u003e\" pre = \"\u003ci class='fa fa-road'\u003e\u003c/i\u003e\" url = \"/getting-started/\" weight = -100 identifier的值不能重复。 weight是比重，值越小则该菜单的位置越靠上面。 name是菜单名字。 pre和post分别对应当前菜单的前缀和后缀，可以定义fontawesome等图标。 ","date":"2020-10-10","objectID":"/posts/hugo-3.html/:7:0","tags":["Hugo","个性化配置"],"title":"Hugo系列(3) - 通过配置文件来定制个人站点","uri":"/posts/hugo-3.html/"},{"categories":["Hugo系列"],"content":"languages语言属性 该属性可以提高站点的国际化功能，即区分多语言版本的站点，比如若设定了en、zh两个语言，设定默认语言是zh；则默认的站点url的根目录后会加上/zh/，并可以通过站点首页的切换语言下拉框来切换到其他语音，如：/en/。 languages一般用来跟上面的menu一起配合使用，如下： [Languages] [Languages.en] title = \"Yulin Lewis' Blog\" weight = 1 languageName = \"English\" [[Languages.en.menu.main]] name = \"\u003ci class='fab fa-fw fa-github'\u003e\u003c/i\u003e GitHub\" identifier = \"github\" url = \"https://github.com/lewky\" weight = 1 [Languages.zh] title = \"雨临Lewis的博客\" weight = 2 languageName = \"简体中文\" [[Languages.zh.menu.main]] name = \"\u003ci class='fab fa-fw fa-github'\u003e\u003c/i\u003e GitHub\" identifier = \"github\" url = \"https://github.com/lewky\" weight = 1 此外，也可以将languages和params搭配使用，用法和上面类似，其实就是在这些属性的前面加上languages前缀而已。但是不知道为什么，在本文背景里提及的hugo和LoveIt版本下，站点无法正常读取到多语言参数，比如[languages.zh-cn.params]这种属性会读取不了。 ","date":"2020-10-10","objectID":"/posts/hugo-3.html/:8:0","tags":["Hugo","个性化配置"],"title":"Hugo系列(3) - 通过配置文件来定制个人站点","uri":"/posts/hugo-3.html/"},{"categories":["Hugo系列"],"content":"minify压缩属性 该属性用于压缩站点的各种静态资源，比如html、css、json、xml等，官方的默认配置如下： [minify] disableCSS = false disableHTML = false disableJS = false disableJSON = false disableSVG = false disableXML = false minifyOutput = false [minify.tdewolff] [minify.tdewolff.css] decimals = -1 keepCSS2 = true [minify.tdewolff.html] keepConditionalComments = true keepDefaultAttrVals = true keepDocumentTags = true keepEndTags = true keepQuotes = false keepWhitespace = false [minify.tdewolff.js] [minify.tdewolff.json] [minify.tdewolff.svg] decimals = -1 [minify.tdewolff.xml] keepWhitespace = false 但实际上在配置文件中加入上述的配置并没有效果，也无法进行修改，这可能是个bug，因为和启用压缩的命令参数冲突了。不过从上面的配置可以看出，hugo自带的压缩功能是默认会压缩CSS、HTML、JS、JSON、SVG、XML；并且在压缩HTML的时候会保留注释、属性、文档标签和闭合标签，但是会去掉引号和空格。 如果想启用压缩功能，可以运行如下命令（记得运行前要先删掉public目录）： hugo --minify 也可以直接把这个参数配置到配置文件中，这样就可以不在运行命令时指定压缩参数： minify = true ","date":"2020-10-10","objectID":"/posts/hugo-3.html/:9:0","tags":["Hugo","个性化配置"],"title":"Hugo系列(3) - 通过配置文件来定制个人站点","uri":"/posts/hugo-3.html/"},{"categories":["Hugo系列"],"content":"参考链接 Configure Hugo Syntax Highlighting Menus Multilingual Mode ","date":"2020-10-10","objectID":"/posts/hugo-3.html/:10:0","tags":["Hugo","个性化配置"],"title":"Hugo系列(3) - 通过配置文件来定制个人站点","uri":"/posts/hugo-3.html/"},{"categories":["Hugo系列"],"content":"背景 使用Hexo搭建个人博客也有两年多时间了，当文章数量达到上百篇之后，开始发现Hexo生成文章的效率越来越慢，直到每次生成都需要至少五分钟的时间。我发现生成效率和文章涉及到的分类和标签有很大关系，由于文章数量多，每篇文章又都关联了若干个分类和标签，再加上我使用了压缩样式的插件，最终导致极其低下的生成效率。 在经过一段时间的考量后，决定将Hexo博客迁移到Hugo。Hugo是用go语言开发的，在用法上和Hexo类似，可以简单地把Hugo当成go语言版的Hexo，但是它拥有更快的生成效率。下面是官网的原话： The world’s fastest framework for building websites Hugo is one of the most popular open-source static site generators. With its amazing speed and flexibility, Hugo makes building websites fun again. ","date":"2020-09-06","objectID":"/posts/hugo-1.html/:1:0","tags":["Hugo","简单入门"],"title":"Hugo系列(1) - 简单入门与搭建","uri":"/posts/hugo-1.html/"},{"categories":["Hugo系列"],"content":"安装 和Hexo不同，Hugo安装非常简单，只需要去Hugo Release下载操作系统对应的二进制文件即可（hugo或者hugo.exe)。 对于Windows平台，一般是一个zip文件，解压后里面有个hugo.exe文件。将该文件所在目录添加到环境变量path里，即可在cmd里通过hugo version检测是否能正常运行hugo命令。 如下是我安装的hugo版本： \u003ehugo version Hugo Static Site Generator v0.74.2-48565DE6 windows/amd64 BuildDate: 2020-07-17T17:22:50Z 其他平台的安装方法可以参考官方文档：Install Hugo ","date":"2020-09-06","objectID":"/posts/hugo-1.html/:2:0","tags":["Hugo","简单入门"],"title":"Hugo系列(1) - 简单入门与搭建","uri":"/posts/hugo-1.html/"},{"categories":["Hugo系列"],"content":"创建站点 首先需要创建一个新的个人站点： hugo new site blog blog就是你的博客站点所在的目录，也是这个站点的根目录，创建站点后目录结构如下： archetypes/ content/ data/ layouts/ static/ themes/ config.toml 下面简单介绍下Hugo根目录下的各个文件目录的作用： archetypes存放创建文件时使用的模板，可以自定义front matter属性。 assets存放需要被Hugo Pipes处理的文件，且只有使用了.Permalink或者.RelPermalink的文件才能被发布到public目录。 注意，默认不会创建assets目录。 config是配置文件，可以有JSON、 YAML或者TOML三种格式，默认使用根目录下的config.toml、config.yaml或config.json中的某一个。可以通过--config来配置读取一个或多个配置文件，如：hugo --config a.toml,b.toml,c.toml。 注意，默认不会创建config目录。 content存放的各种md文件用于部署站点，该目录下可以自行创建若干个子目录来便于对文章进行分类，这些子目录被称为section。 data目录存放的是用于定义变量的模板文件，相当于Java里的常量类，这些文件有JSON、 YAML或者TOML三种格式，会在生成站点时被使用到。一般用不到该功能，具体用法可以参考：data templates layouts目录存放的模板文件用于渲染html页面，模板里可以定义不同页面的html代码。 static目录存放的是静态内容：图片、CSS、JavaScript等。 resources目录用于缓存某些文件来提高生成效率。 注意，默认不会创建resources目录。 ","date":"2020-09-06","objectID":"/posts/hugo-1.html/:3:0","tags":["Hugo","简单入门"],"title":"Hugo系列(1) - 简单入门与搭建","uri":"/posts/hugo-1.html/"},{"categories":["Hugo系列"],"content":"添加主题 为新站点添加一个主题，以我使用的LoveIt主题为例，先将主题代码放置到themes目录下： cd blog git init git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt 接着修改config.toml： theme = \"LoveIt\" 这里的LoveIt对应themes目录下的主题的文件夹名字。 ","date":"2020-09-06","objectID":"/posts/hugo-1.html/:4:0","tags":["Hugo","简单入门"],"title":"Hugo系列(1) - 简单入门与搭建","uri":"/posts/hugo-1.html/"},{"categories":["Hugo系列"],"content":"新建文章 新建一篇文章： hugo new posts/first.md 该命令会在content/posts目录下生成first.md文件，打开进行编辑： --- title: \"First\" date: 2020-09-08T21:57:28+08:00 draft: true --- ## First First blog. 两行---里的属性是front matter，用来设置当前文章的属性配置。front matter的内容可以使用3种不同的格式来定义，两行---之间对应的是YAML格式，两行+++之间对应的是TOML格式，{和}之间对应的是JSON格式。 建议用YAML格式来定义，这样从Hexo迁移到Hugo的成本会更低。 下面是官方文档提供的3种不同格式的front matter的样例，有兴趣的可以了解下。 ","date":"2020-09-06","objectID":"/posts/hugo-1.html/:5:0","tags":["Hugo","简单入门"],"title":"Hugo系列(1) - 简单入门与搭建","uri":"/posts/hugo-1.html/"},{"categories":["Hugo系列"],"content":"TOML Example +++ title = \"spf13-vim 3.0 release and new website\" description = \"spf13-vim is a cross platform distribution of vim plugins and resources for Vim.\" tags = [ \".vimrc\", \"plugins\", \"spf13-vim\", \"vim\" ] date = \"2012-04-06\" categories = [ \"Development\", \"VIM\" ] slug = \"spf13-vim-3-0-release-and-new-website\" +++ Content of the file goes Here ","date":"2020-09-06","objectID":"/posts/hugo-1.html/:5:1","tags":["Hugo","简单入门"],"title":"Hugo系列(1) - 简单入门与搭建","uri":"/posts/hugo-1.html/"},{"categories":["Hugo系列"],"content":"YAML Example --- title: \"spf13-vim 3.0 release and new website\" description: \"spf13-vim is a cross platform distribution of vim plugins and resources for Vim.\" tags: [ \".vimrc\", \"plugins\", \"spf13-vim\", \"vim\" ] lastmod: 2015-12-23 date: \"2012-04-06\" categories: - \"Development\" - \"VIM\" slug: \"spf13-vim-3-0-release-and-new-website\" --- Content of the file goes Here ","date":"2020-09-06","objectID":"/posts/hugo-1.html/:5:2","tags":["Hugo","简单入门"],"title":"Hugo系列(1) - 简单入门与搭建","uri":"/posts/hugo-1.html/"},{"categories":["Hugo系列"],"content":"JSON Example { \"title\": \"spf13-vim 3.0 release and new website\", \"description\": \"spf13-vim is a cross platform distribution of vim plugins and resources for Vim.\", \"tags\": [ \".vimrc\", \"plugins\", \"spf13-vim\", \"vim\" ], \"date\": \"2012-04-06\", \"categories\": [ \"Development\", \"VIM\" ], \"slug\": \"spf13-vim-3-0-release-and-new-website\", } Content of the file goes Here ","date":"2020-09-06","objectID":"/posts/hugo-1.html/:5:3","tags":["Hugo","简单入门"],"title":"Hugo系列(1) - 简单入门与搭建","uri":"/posts/hugo-1.html/"},{"categories":["Hugo系列"],"content":"启动Hugo服务 输入命令： hugo server -D 在本地启动服务后可以在 http://localhost:1313/ 访问个人站点。该命令仅用于本地调试，支持热修改，也就是说在启动服务时修改文章会实时生效，但是该命令不会真正生成静态文件。 ","date":"2020-09-06","objectID":"/posts/hugo-1.html/:6:0","tags":["Hugo","简单入门"],"title":"Hugo系列(1) - 简单入门与搭建","uri":"/posts/hugo-1.html/"},{"categories":["Hugo系列"],"content":"生成静态页面 输入命令： hugo -D 默认会在站点根目录的public/目录下生成对应的静态页面，可以通过在命令行指定-d或者--destination参数来改变静态页面的存放路径，也可以通过在配置文件中设置publishDir来指定。 该命令生成的静态页面文件是用来部署到pages服务的，比如GitHub pages或者Coding pages等。 另外，hugo允许对生成的静态页面设置特殊的参数，比如在文章的front matter里设置参数：draft, publishdate和expirydate。如下： --- title: \"First\" date: 2020-09-08T21:57:28+08:00 draft: true publishdate: 2020-09-18T21:57:28+08:00 expirydate: 2020-09-28T21:57:28+08:00 --- draft: true表明该文章是草稿，如果在启用服务时不指定参数-D或--buildDrafts，或者在配置文件config.toml中配置buildDrafts = true，则会在生成文章时忽略草稿。如果不想指定该参数就生成文章，需要改为draft: false或者将其删去。 publishdate: 2020-09-18T21:57:28+08:00表示将来发布的时间，如果不指定参数-F或--buildFuture，或者在配置文件config.toml中配置buildFuture = true，则无法在规定的日期之前生成该文章。 expirydate: 2020-09-28T21:57:28+08:00表示过期时间，如果不指定参数-E或--buildExpired，或者在配置文件config.toml中配置buildExpired = true，则无法在规定的日期之后生成该文章。 ","date":"2020-09-06","objectID":"/posts/hugo-1.html/:7:0","tags":["Hugo","简单入门"],"title":"Hugo系列(1) - 简单入门与搭建","uri":"/posts/hugo-1.html/"},{"categories":["Hugo系列"],"content":"参考链接 Hugo Front Matter Hugo Quick Start Install Hugo Directory Structure Explained ","date":"2020-09-06","objectID":"/posts/hugo-1.html/:8:0","tags":["Hugo","简单入门"],"title":"Hugo系列(1) - 简单入门与搭建","uri":"/posts/hugo-1.html/"},{"categories":["Hexo瞎折腾系列"],"content":"前言 本系列的所有修改均基于本系列第一篇中的新增文件(譬如custom.js)，请先自行阅读Hexo瞎折腾系列(1) - 准备工作与简单美化；并按照文章所说自行修改代码或文件。 ","date":"2019-05-26","objectID":"/posts/bdceb0a1.html/:1:0","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(9) - 网页标题崩溃特效","uri":"/posts/bdceb0a1.html/"},{"categories":["Hexo瞎折腾系列"],"content":"为网页添加标题崩溃特效 该特效为：当用户离开站点相关的页面时，网页的标题会变成“已崩溃”，网站图标也会改变；当用户重新回到站点页面时才会恢复正常。 实现方式如下： 请在themes/next/source/js/src/custom.js里加入如下代码： /* 离开当前页面时修改网页标题，回到当前页面时恢复原来标题 */ window.onload = function() { var OriginTitile = document.title; var titleTime; document.addEventListener('visibilitychange', function() { if(document.hidden) { $('[rel=\"icon\"]').attr('href', \"/failure.ico\"); $('[rel=\"shortcut icon\"]').attr('href', \"/failure.ico\"); document.title = '喔唷，崩溃啦！'; clearTimeout(titleTime); } else { $('[rel=\"icon\"]').attr('href', \"/favicon-32x32.ico\"); $('[rel=\"shortcut icon\"]').attr('href', \"/favicon-32x32.ico\"); document.title = '咦，页面又好了！'; titleTime = setTimeout(function() { document.title = OriginTitile; }, 2000); } }); } 然后在站点根目录的/source目录下添加failure.ico，作为网站崩溃时显示的图标；如下： failure.ico \" failure.ico 这里的favicon-32x32.ico是你个人站点的图标，改成你自己的图标就好。 ","date":"2019-05-26","objectID":"/posts/bdceb0a1.html/:2:0","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(9) - 网页标题崩溃特效","uri":"/posts/bdceb0a1.html/"},{"categories":["Hexo写作系列"],"content":"问题 在用Hexo写文章时，如果文章标题含有双引号\"，也就是说如果在文件头里的title出现双引号，如下： ---title:Hexo- 文章标题含有双引号\"导致页面渲染失败无法打开--- 由于这里的写法属于yml语法，双引号属于特殊符号，上述的title的写法就会在执行hexo g时报错，当我们在浏览器里打开这篇文章的页面时就会渲染失败无法打开。 ","date":"2019-05-04","objectID":"/posts/31deca5f.html/:1:0","tags":["Hexo写作系列","NexT主题"],"title":"Hexo写作系列(3) - 文章标题含有双引号\"导致页面渲染失败无法打开","uri":"/posts/31deca5f.html/"},{"categories":["Hexo写作系列"],"content":"解决方法 我们需要对这里的双引号进行转义，对于这些特殊字符，可以用对应的HTML字符实体来替换。 对于双引号，其字符实体是\u0026#34;或者\u0026quot;。 最终我们在hexo文章的文件头里，应该这样写： ---title:Hexo- 文章标题含有双引号\u0026#34;导致页面渲染失败无法打开--- ","date":"2019-05-04","objectID":"/posts/31deca5f.html/:2:0","tags":["Hexo写作系列","NexT主题"],"title":"Hexo写作系列(3) - 文章标题含有双引号\"导致页面渲染失败无法打开","uri":"/posts/31deca5f.html/"},{"categories":["Hexo写作系列"],"content":"补充 当然，对于文件头之外的部分，则是属于markdown语法的部分，此外由于我们的文章会被swig渲染，同样有一些特殊字符，比如 {{}}，如果在代码块之外的地方使用到这些特殊字符，就会报错！对于不同的语言，各自的特殊字符是不一样的。 这里补充下各种常用到的特殊字符的字符实体： ! \u0026#33; — 惊叹号 Exclamation mark \" \u0026#34; \u0026quot; — 双引号 Quotation mark # \u0026#35; — 数字标志 Number sign $ \u0026#36; — 美元标志 Dollar sign % \u0026#37; — 百分号 Percent sign \u0026 \u0026#38; \u0026amp; — 与符号(\u0026) Ampersand ' \u0026#39; — 单引号 Apostrophe ( \u0026#40; — 小括号左边部分 Left parenthesis ) \u0026#41; — 小括号右边部分 Right parenthesis * \u0026#42; — 星号 Asterisk + \u0026#43; — 加号 Plus sign \u003c \u0026#60; \u0026lt; 小于号 Less than = \u0026#61; — 等于符号 Equals sign - \u0026#45; \u0026minus; — 减号 \u003e \u0026#62; \u0026gt; — 大于号 Greater than ? \u0026#63; — 问号 Question mark @ \u0026#64; — Commercial at [ \u0026#91; — 中括号左边部分 Left square bracket \\ \u0026#92; — 反斜杠 Reverse solidus (backslash) ] \u0026#93; — 中括号右边部分 Right square bracket { \u0026#123; — 大括号左边部分 Left curly brace | \u0026#124; — 竖线Vertical bar } \u0026#125; — 大括号右边部分 Right curly brace 如果想要在文章中使用空格，直接输入空格是没用的，同样可以使用字符实体来代替，即\u0026nbsp;。这个代表不间断空格：non-breaking space。 ","date":"2019-05-04","objectID":"/posts/31deca5f.html/:3:0","tags":["Hexo写作系列","NexT主题"],"title":"Hexo写作系列(3) - 文章标题含有双引号\"导致页面渲染失败无法打开","uri":"/posts/31deca5f.html/"},{"categories":["Hexo写作系列"],"content":"参考链接 Hexo 特殊符号的转义问题 HTML 字符实体 常用特殊符号的HTML代码(HTML字符实体) ","date":"2019-05-04","objectID":"/posts/31deca5f.html/:4:0","tags":["Hexo写作系列","NexT主题"],"title":"Hexo写作系列(3) - 文章标题含有双引号\"导致页面渲染失败无法打开","uri":"/posts/31deca5f.html/"},{"categories":["Hexo"],"content":"问题与分析 某天忽然发现，一直运行得好好的Pages服务部署失败了，GitHub Pages报错如下： Your site is having problems building: The tag cq on line 3 in source/high/index.md is not a recognized Liquid tag. For more information, see https://help.github.com/articles/page-build-failed-unknown-tag-error/. 与此同时，Coding Pages同样也报错了： Starting jekyll build. \u003e jekyll build --safe Configuration file: /usr/src/app/_config.yml jekyll 3.6.2 | Error: The next theme could not be found. Jekyll build exit with code 1. Fail to build jekyll site. 首先我使用的是Hexo的next主题，而根据GitHub Pages的报错信息来看，是说在source/high/index.md里使用到了一个不认识的cq标签。 这个标签是next主题自带的，使用该标签快一年了，还是第一次遇到报这个错。接着根据Coding Pages的报错来看，则是说/usr/src/app/_config.yml里找不到jekyll的主题。 这就很奇怪了，我使用的明明是hexo，怎么忽然就变成jekyll了？一阵瞎折腾过后，一直部署失败。我忽然想起来一个事情，我之前曾经拿本地的博客仓库的git配置练过手，难道和这个有关？ 我开始查找本地博客仓库的git配置，我是使用hexo-deployer-git这个插件来将本地生成的静态博客发送到远程仓库的。 当我在本地在执行hexo g后，会在博客根目录下生成一个public文件夹，这个文件夹里的文件组合起来就是一个完整的静态博客。 接着如果执行hexo d，就会把这个public文件夹的东西完完整整拷贝到.deploy_git文件夹里，然后会把该文件夹里的所有文件全部推送push到远程库。之后会触发Pages服务的钩子去build项目，然后部署到网站上。 ","date":"2019-04-26","objectID":"/posts/a5a02c64.html/:1:0","tags":["Hexo"],"title":"Hexo - 记录一次Pages服务部署失败的原因","uri":"/posts/a5a02c64.html/"},{"categories":["Hexo"],"content":"发现线索 我打开public文件夹，发现生成出来的文件很正常，接着打开.deploy_git文件夹，发现也很正常，接着查看远程库里的文件，终于发现了问题。 在远程库的分支里，根本就没有hexo相关的文件，至此算是找到原因了。 很显然，我在执行hexo d时出了问题，没能正常将文件push到远程库，于是部署就失败了。之前该命令是没问题的，可之前我曾经动过手脚，修改过博客项目里的git配置，手动修改了.git里的文件，莫非这就是问题的根源？ ","date":"2019-04-26","objectID":"/posts/a5a02c64.html/:2:0","tags":["Hexo"],"title":"Hexo - 记录一次Pages服务部署失败的原因","uri":"/posts/a5a02c64.html/"},{"categories":["Hexo"],"content":"解决方法 基于以上的猜想，我直接删掉了本地博客项目的.deploy_git文件夹，重新执行命令： hexo cl hexo g -d 等待片刻后，我终于看到远程部署成功，我的个人站点再次运转成功！ 皇天不负有心人啊！原因终于明了，是.deploy_git文件夹出现问题，删掉该文件夹，重新运行hexo d即可。 记录下这次的遭遇，遇到问题应该静下心来，仔细分析，才不容易瞎折腾~ ","date":"2019-04-26","objectID":"/posts/a5a02c64.html/:3:0","tags":["Hexo"],"title":"Hexo - 记录一次Pages服务部署失败的原因","uri":"/posts/a5a02c64.html/"},{"categories":["Eclipse"],"content":"方法 Window -\u003e Preferences -\u003e General -\u003e Startup and Shutdown -\u003e Workspaces 勾选Prompt for workspace on startup ","date":"2019-01-30","objectID":"/posts/3671826f.html/:1:0","tags":["IDE工具","Eclipse"],"title":"Eclipse - 怎么设置在启动时提示选择工作空间","uri":"/posts/3671826f.html/"},{"categories":["Eclipse"],"content":"参考链接 怎样设置Eclipse在启动时提示选择工作空间 ","date":"2019-01-30","objectID":"/posts/3671826f.html/:2:0","tags":["IDE工具","Eclipse"],"title":"Eclipse - 怎么设置在启动时提示选择工作空间","uri":"/posts/3671826f.html/"},{"categories":["Eclipse"],"content":"问题 Eclipse在安装了jd-eclipse插件后依然无法反编译类文件，这个问题是因为没有修改默认的类文件查看器。 ","date":"2019-01-30","objectID":"/posts/89d8e317.html/:1:0","tags":["IDE工具","Eclipse"],"title":"Eclipse - 安装了jd-eclipse插件后依然无法反编译类文件","uri":"/posts/89d8e317.html/"},{"categories":["Eclipse"],"content":"解决方法 修改默认的类文件查看器为jd-eclipse Window -\u003e Preference -\u003e General -\u003e Editors -\u003e File Associations 选中*.class，将Class File Editor设置为默认(Default) 选中*.class without source，将Class File Editor设置为默认(Default)；如果这一步操作只有Class File Viewer，则需要点击Add把Class File Editor添加进来并设置为默认(Default) 新版本的jd-eclipse的类文件查看器名字可能叫做JD Class File Viewer(总之，Class File Viewer是Eclipse自带的类文件查看器，安装插件后会出现新的类文件查看器) 接着重启Eclipse后就可以正常地反编译类文件了，如果缺少上述的第三步操作，会有比较大的可能依然无法反编译类文件。 ","date":"2019-01-30","objectID":"/posts/89d8e317.html/:2:0","tags":["IDE工具","Eclipse"],"title":"Eclipse - 安装了jd-eclipse插件后依然无法反编译类文件","uri":"/posts/89d8e317.html/"},{"categories":["Eclipse"],"content":"参考链接 安装jadClipse插件后,还是不能反编译.class ","date":"2019-01-30","objectID":"/posts/89d8e317.html/:3:0","tags":["IDE工具","Eclipse"],"title":"Eclipse - 安装了jd-eclipse插件后依然无法反编译类文件","uri":"/posts/89d8e317.html/"},{"categories":["Hexo"],"content":"问题 一般我们会将Hexo博客搭建到Github上，如果在Github上为其配置一个自定义的域名时，会自动在项目仓库根目录下新添加一个CNAME文件。但是这里有个问题，如果将Hexo博客重新部署一遍后，Github仓库里的这个CNAME文件就会消失掉，又需要重新配置一遍。 ","date":"2018-12-19","objectID":"/posts/39e3ca60.html/:1:0","tags":["Hexo","CNAME"],"title":"Hexo - CNAME文件在每次部署后就没了","uri":"/posts/39e3ca60.html/"},{"categories":["Hexo"],"content":"解决方法 其实这里有个技巧，我们可以将需要上传部署到Github的文件都放在source文件夹里，例如CNAME文件、favicon.ico、或者其他的图片等等，这样在执行hexo d这个命令之后，这些文件就不会被删除了。 Hexo在执行命令时是不会删除掉source目录下的文件的，我们可以在该目录下随意增加其他文件或者文件夹，建议在该目录下添加子文件夹，然后在子文件夹里添加文件，这样便于文件分档归类。 ","date":"2018-12-19","objectID":"/posts/39e3ca60.html/:2:0","tags":["Hexo","CNAME"],"title":"Hexo - CNAME文件在每次部署后就没了","uri":"/posts/39e3ca60.html/"},{"categories":["Eclipse"],"content":"问题与分析 最近开始学习spring-boot框架，我用的是Eclipse，然后发现在使用到了lombok的@Data注解时，Eclipse会编译错误。@Data的作用是自动生成toString方法和setter/getter方法，可以减少大量重复性的代码工作。 另外在使用了@Slf4j注解时，这个注解可以自动为当前类生成一个log变量，即：rivate final Logger logger = LoggerFactory.getLogger(XXX.class);。然而Eclipse无法识别log变量，会报log变量未声明的错误。 一开始我以为是没导入包或者漏了jar包，但是检查一番后没有问题。百度了下才知道，原来除了导包之外，还需要为Eclipse安装该lombok插件。 ","date":"2018-10-24","objectID":"/posts/eea0b72e.html/:1:0","tags":["IDE工具","Eclipse","lombok"],"title":"Eclipse - lombok的@Slf4j和@Data无效","uri":"/posts/eea0b72e.html/"},{"categories":["Eclipse"],"content":"解决方法 安装方法很简单，找到你导入的lombok的jar包，双击运行该jar包，会出现一个安装界面。或者右键jar包，选择打开方式，接着选择Java (TM) Platform SE binary，会出现安装界面。 在安装界面选择当前的Eclipse进程，或者点击左下角的Specify location...选择你要安装插件的Eclipse，接着点右下角的Install / Update，很快就安装完毕，点击Quit Installer。 lombok的下载地址：https://projectlombok.org/downloads/lombok.jar ","date":"2018-10-24","objectID":"/posts/eea0b72e.html/:2:0","tags":["IDE工具","Eclipse","lombok"],"title":"Eclipse - lombok的@Slf4j和@Data无效","uri":"/posts/eea0b72e.html/"},{"categories":["Eclipse"],"content":"问题补充 当我安装好lombok之后，Eclipse虽然能够正常识别@Slf4j注解生成的log变量，但@Data注解依然无效。在使用到了pojo类的私有变量时，依然会提示说缺少setter/getter方法。折腾了好久，才发现原来是因为Eclipse自动给我的pojo类的私有变量加上final修饰符，导致setter/getter方法注入失败了。 把pojo类的私有变量前边的final去掉后，@Data终于生效了。之所以会自动给变量加上final修饰符，是因为我设置了Save Action，Eclipse会自动在我保存代码的时候自动在私有变量、局部变量前加上final修饰符，这个是公司制定的代码编程规范。 ","date":"2018-10-24","objectID":"/posts/eea0b72e.html/:3:0","tags":["IDE工具","Eclipse","lombok"],"title":"Eclipse - lombok的@Slf4j和@Data无效","uri":"/posts/eea0b72e.html/"},{"categories":["Hexo"],"content":"问题与分析 今天发现在使用hexo g时报错如下： FATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html Template render error: unexpected token: }} 一时间很诧异，因为前几天还可以正常生成静态文件，今天忽然就挂了。看看报错的信息，说是模板渲染失败，因为出现了预期外的标志。因为我刚刚写了新的文章，就出现了这个错误，可以想象到，应该是文章中出现了特殊字符导致hexo命令执行失败了。 百度了下，确实如此。因为在Hexo中，有些特殊字符如果不进行转义的话，在渲染模板时就会报错。 ","date":"2018-10-23","objectID":"/posts/2a5ffb7e.html/:1:0","tags":["Hexo"],"title":"Hexo - Template render error unexpected token","uri":"/posts/2a5ffb7e.html/"},{"categories":["Hexo"],"content":"解决方法 如果遇到类似的报错，解决方法很简单，就是对这些特殊字符进行转义，需要使用转义标签来将这些特殊字符包括起来，如下： {% raw %} 特殊字符 {% endraw %} 比如我的报错是因为使用{% raw %}}}{% endraw %}，那么就需要对这对大括号进行转义： {% raw %} {{ something... }} {% endraw %} 如果是在引用块里，可以随便使用特殊字符；如果是行内引用块，就需要进行转义了。 ","date":"2018-10-23","objectID":"/posts/2a5ffb7e.html/:2:0","tags":["Hexo"],"title":"Hexo - Template render error unexpected token","uri":"/posts/2a5ffb7e.html/"},{"categories":["Hexo"],"content":"参考链接 Hexo的一个小BUG(Template render error) Hexo 异常 - Template render error unexpected token ","date":"2018-10-23","objectID":"/posts/2a5ffb7e.html/:3:0","tags":["Hexo"],"title":"Hexo - Template render error unexpected token","uri":"/posts/2a5ffb7e.html/"},{"categories":["Hexo写作系列"],"content":"前言 NexT主题会自动为每一篇文章生成目录，这个目录可以通过配置来控制是否生成对应的序号。毕竟有时候我们会给文章的小标题写上序号，有时候又会懒得去写，这个时候这个配置就很重要了。 有两种方法来实现这个效果，一种是全局生效，一种是对具体某篇文章生效。 ","date":"2018-09-06","objectID":"/posts/99e0f22b.html/:1:0","tags":["Hexo写作系列","NexT主题"],"title":"Hexo写作系列(2) - 如何令文章目录显示序号","uri":"/posts/99e0f22b.html/"},{"categories":["Hexo写作系列"],"content":"全局生效 在NexT的主题配置文件 _config.yml中启用如下配置： # Table Of Contents in the Sidebar # 侧栏文章目录设置 toc: enable: true # Automatically add list number to toc. # 自动为文章目录添加行号 number: true 设置为true后就可以对站点下所有文章自动添加序号，如果想取消这个功能，再设置为false即可。 ","date":"2018-09-06","objectID":"/posts/99e0f22b.html/:2:0","tags":["Hexo写作系列","NexT主题"],"title":"Hexo写作系列(2) - 如何令文章目录显示序号","uri":"/posts/99e0f22b.html/"},{"categories":["Hexo写作系列"],"content":"对具体某篇文章生效 如果你在文章的小标题中已经使用了序号，那么自动为文章目录添加序号的功能会导致你的文章目录出现了赘余的序号，解决方法很简单，在你的文章的文件头添加一行代码即可，如下： --- title: XXX date: XXX toc_number: false --- 这样这篇文章就不会被自动添加序号到文章目录里了。 ","date":"2018-09-06","objectID":"/posts/99e0f22b.html/:3:0","tags":["Hexo写作系列","NexT主题"],"title":"Hexo写作系列(2) - 如何令文章目录显示序号","uri":"/posts/99e0f22b.html/"},{"categories":["Hexo写作系列"],"content":"前言 本系列主要介绍和hexo-NexT主题相关的一些写作技巧，可能会涉及到部分前端知识(不了解也没关系，能用就行)。我之所以选择hexo-NexT来搭建个人网站，一个很重要的原因就是因为简单、方便、快捷！不需要服务器，直接通过Markdown来进行写作，不仅文章布局美观，还可以节省大量的时间。 我一般不会在文章中手动加入各种html标签，因为太麻烦了–而NexT主题就很贴心地自带了一些样式，让你可以不需要自己写一大堆html标签就能得到美观的页面效果。 本系列针对的是NexT 5.1.4版本的样式，请到我的个人站点更加直观地看到页面效果，不便之处还请见谅。 -\u003e这是本文在个人站点的链接\u003c- ","date":"2018-09-05","objectID":"/posts/38eb04fa.html/:1:0","tags":["Hexo写作系列","NexT主题"],"title":"Hexo写作系列(1) - NexT主题自带的样式","uri":"/posts/38eb04fa.html/"},{"categories":["Hexo写作系列"],"content":"文本居中引用 该样式可以将一段文本居中显示，并在首尾各自生成一个引号图片，效果如下： hexo-write-1.jpg \" hexo-write-1.jpg 源码如下： {% cq %} 人类的本质是复读机。 ——**复读机** {% endcq %} 原本该样式的字体是黑色的，我把它改成红色了。这里的cq是标签别名，也可以用完整的标签名： {% centerquote %} 人类的本质是复读机。 ——**复读机** {% endcenterquote %} ","date":"2018-09-05","objectID":"/posts/38eb04fa.html/:2:0","tags":["Hexo写作系列","NexT主题"],"title":"Hexo写作系列(1) - NexT主题自带的样式","uri":"/posts/38eb04fa.html/"},{"categories":["Hexo写作系列"],"content":"图片突破容器宽度限制 使用此标签引用图片时，图片将自动扩大 26%，并突破文章容器的宽度。 此标签使用于需要突出显示的图片, 图片的扩大与容器的偏差从视觉上提升图片的吸引力。效果如下： 附上一张wlop大大的saber~ hexo-write-2.jpg \" hexo-write-2.jpg 使用方式如下： {% fullimage /image-url, alt, title %} \u003c!-- 别名 --\u003e {% fi /image-url, alt, title %} 这里的alt和title可以不写，alt属性是找不到图片时显示的文本，title是鼠标停留在图片上时显示的文本。 ","date":"2018-09-05","objectID":"/posts/38eb04fa.html/:3:0","tags":["Hexo写作系列","NexT主题"],"title":"Hexo写作系列(1) - NexT主题自带的样式","uri":"/posts/38eb04fa.html/"},{"categories":["Hexo写作系列"],"content":"Note标签 本标签出自于Bootstrap，使用前需要先启用主题配置文件： # 主题自带的标签样式，有 note、label、tabs 三种# Note tag (bs-callout).note:# Note tag style values:# - simple bs-callout old alert style. Default.# - modern bs-callout new (v2-v3) alert style.# - flat flat callout style with background, like on Mozilla or StackOverflow.# - disabled disable all CSS styles import of note tag.# Note标签的样式有四种：# - simple：默认的样式，也是Bootstrap Callout旧版本的样式。# - modern：Bootstrap Callout新版本(v2-v3)的样式。# - flat：该样式会连同背景也一起渲染，如同Mozilla或者StackOverflow那样。# - disabled：禁用本Note标签。style:flaticons:trueborder_radius:3# Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).# Offset also applied to label tag variables. This option can work with disabled note tag.light_bg_offset:0 效果如下： hexo-write-3.jpg \" hexo-write-3.jpg Note标签一共有以上六种类型：default,primary,success,info,warning,danger，源码如下： {% note default %}default{% endnote %} {% note primary %}primary{% endnote %} {% note success %}success{% endnote %} {% note info %}info{% endnote %} {% note warning %}warning{% endnote %} {% note danger %}danger{% endnote %} ","date":"2018-09-05","objectID":"/posts/38eb04fa.html/:4:0","tags":["Hexo写作系列","NexT主题"],"title":"Hexo写作系列(1) - NexT主题自带的样式","uri":"/posts/38eb04fa.html/"},{"categories":["Hexo写作系列"],"content":"Label标签 使用前同样需要启用配置： # Label tag.label:true 效果如下： hexo-write-4.jpg \" hexo-write-4.jpg 和Note标签一样，同样是六种类型。@前面是类型，@后面是显示的文本内容。这个label标签的样式并不好看，我基本不用。 ","date":"2018-09-05","objectID":"/posts/38eb04fa.html/:5:0","tags":["Hexo写作系列","NexT主题"],"title":"Hexo写作系列(1) - NexT主题自带的样式","uri":"/posts/38eb04fa.html/"},{"categories":["Hexo写作系列"],"content":"Tab标签 这个标签和浏览器的tab是类似的，使用前也需要启用配置： # Tabs tag.tabs:enable:truetransition:tabs:truelabels:trueborder_radius:3 效果如下： hexo-write-5.jpg \" hexo-write-5.jpg 源码如下： {% tabs 贴吧, 1 %} \u003c!-- tab android开发吧 --\u003e 有问题为什么不先问问隔壁Java吧呢？ \u003c!-- endtab --\u003e \u003c!-- tab java吧 --\u003e 有问题为什么不先问问隔壁C++吧呢？ \u003c!-- endtab --\u003e \u003c!-- tab c++吧 --\u003e 有问题为什么不先问问隔壁C语言吧呢？ \u003c!-- endtab --\u003e \u003c!-- tab c语言 --\u003e 有问题为什么不先问问神奇海螺吧呢？ \u003c!-- endtab --\u003e \u003c!-- tab 神奇海螺 --\u003e 有问必答不知道 \u003c!-- endtab --\u003e {% endtabs %} 简单介绍下常规用法： 源码第一行的数字表示默认显示哪一个tab页面，如果是-1则表示隐藏所有tab页面内容。 如果不为每个tab单独制定名字，则会以第一行源码的名字为每个tab命名，并自动在名字后加上1,2,3...以示区分。 tab的名字支持fontawesome图标，使用方法是@加上图标的名字，例如@home，注意该图标需要添加在tab名字的最后，渲染时图标会自动放在名字最前面，比如：\u003c!-- tab android开发吧@home --\u003e 更多用法可以参考该文章 ","date":"2018-09-05","objectID":"/posts/38eb04fa.html/:6:0","tags":["Hexo写作系列","NexT主题"],"title":"Hexo写作系列(1) - NexT主题自带的样式","uri":"/posts/38eb04fa.html/"},{"categories":["Hexo写作系列"],"content":"按钮标签样式 这个样式和阅读全文那个按钮一样，效果如下： hexo-write-6.jpg \" hexo-write-6.jpg 源码如下： {% btn https://www.baidu.com, 点击前往百度, download fa-lg fa-fw %} 更多用法可以参考该文章 此外还有其他的标签样式的使用方法，请参考下边的连接文章。 ","date":"2018-09-05","objectID":"/posts/38eb04fa.html/:7:0","tags":["Hexo写作系列","NexT主题"],"title":"Hexo写作系列(1) - NexT主题自带的样式","uri":"/posts/38eb04fa.html/"},{"categories":["Hexo写作系列"],"content":"参考链接 官方文档：内置标签 - NexT 使用文档 打造个性超赞博客Hexo+NexT+GitHubPages的超深度优化 样式汇总 ","date":"2018-09-05","objectID":"/posts/38eb04fa.html/:8:0","tags":["Hexo写作系列","NexT主题"],"title":"Hexo写作系列(1) - NexT主题自带的样式","uri":"/posts/38eb04fa.html/"},{"categories":["Hexo瞎折腾系列"],"content":"前言 Hexo的NexT主题本身就集成了一些评论系统，多说啊之类的已经关闭服务的略过不提，目前比较多人用的有畅言、来必力livere、Gitment、Gitalk、Disqus等。 我刚用的评论系统的时候，网易云跟贴和多说已经gg了，畅言需要备案，Disqus需要FQ，Gitment和Gitalk类似，都需要GitHub账号。经过搜集资料和考虑，我最终还是决定使用Gitment。只是在用了一段时间后，终于还是放弃了Gitment，转而使用来必力livere。 ","date":"2018-09-05","objectID":"/posts/ec12c039.html/:1:0","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(8) - 添加评论系统","uri":"/posts/ec12c039.html/"},{"categories":["Hexo瞎折腾系列"],"content":"Gitment的优缺点 最初我选择使用Gitment的原因如下： Gitment是一个基于GitHub的issue来开发的评论插件，本身很有创意，对于我这种没事看看GitHub的也很有吸引力。 使用Gitment进行评论需要有GitHub账号，这无形中过滤掉了一些评论者，毕竟不是谁都有GitHub账号的，也不是谁都能登陆上GitHub的。 GitHub的评论数据存放在GitHub的issue里，基本不用担心数据丢失或者GitHub关闭服务，毕竟GitHub可是全球最大同性交友社区(滑稽)。 当我美滋滋地享受了Gitment一段时间后，开始发现一些问题： GitHub是个神奇的网站，有时候会登陆不上去，这导致我的个人站点加载页面时无法把Gitment加载出来，这使得我的页面长时间处于一片空白的状态，用户体验极差，而且最后页面加载出来了，Gitment评论模块依然没有加载出来。 我希望我的站点可以不分国界，所以我将站点分别部署到了Coding.net和GitHub上，这样可以国内外都快速访问到站点(这个需要域名才能实现)。由于国内有些地区在有些时段是无法访问到GitHub的，这将导致我的页面长时间假死。 Gitment的使用太繁琐，每一篇文章都必须先初始化一遍，才能使用评论系统，如果你有一百篇文章，你就需要手动初始化一百次！虽然后来有脚本一键初始化，但还是很麻烦。 issue的滥用。因为Gitment是建立的issue之上的，当你的文章越来越多，你会发现你的站点仓库里的issue会越来越多，这就不太友好了。 综上所述，我还是放弃了Gitment，转投了来必力的怀抱。 ","date":"2018-09-05","objectID":"/posts/ec12c039.html/:2:0","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(8) - 添加评论系统","uri":"/posts/ec12c039.html/"},{"categories":["Hexo瞎折腾系列"],"content":"Gitment使用流程 虽然现在没有使用Gitment了，但这里还是记录下当初遇到的问题，方便回顾或者大家解决类似的困难。 ","date":"2018-09-05","objectID":"/posts/ec12c039.html/:3:0","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(8) - 添加评论系统","uri":"/posts/ec12c039.html/"},{"categories":["Hexo瞎折腾系列"],"content":"安装模块 使用Gitment需要安装模块： npm i --save gitment ","date":"2018-09-05","objectID":"/posts/ec12c039.html/:3:1","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(8) - 添加评论系统","uri":"/posts/ec12c039.html/"},{"categories":["Hexo瞎折腾系列"],"content":"申请应用ID与密钥 因为Gitment需要GitHub的授权，所以需要先去New OAuth App申请一个密钥，需要填写的内容如下： Application name:随便写 Homepage URL:这个也可以随意写,就写你的博客地址就行 Application description:描述,也可以随意写 Authorization callback URL:这个必须写你的博客地址 这里只有最后一个callback必须写准确，申请成功后你可以看到ClientID和Client Secret，这个会被使用到，另外注意不要把这个ID和密钥告诉别人– ","date":"2018-09-05","objectID":"/posts/ec12c039.html/:3:2","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(8) - 添加评论系统","uri":"/posts/ec12c039.html/"},{"categories":["Hexo瞎折腾系列"],"content":"在主题配置文件中启用 # Gitment# Introduction: https://imsun.net/posts/gitment-introduction/gitment:enable:truemint:true# RECOMMEND, A mint on Gitment, to support count, language and proxy_gatewaycount:true# Show comments count in post meta arealazy:false# Comments lazy loading with a buttoncleanly:false# Hide 'Powered by ...' on footer, and morelanguage:# Force language, or auto switch by themegithub_user:{yougithubuserid}github_repo:随便写一个你的公开的git仓库就行,到时候评论会作为那个项目的issueclient_id:{刚才申请的ClientID}client_secret:{刚才申请的ClientSecret}proxy_gateway: # Address of api proxy, See:https://github.com/aimingoo/intersectredirect_protocol:# Protocol of redirect_uri with force_redirect_protocol when mint enabled 这里的配置，只有github_user，github_repo，client_id，client_secret是必须填准确的，其他的可以不使用。 ","date":"2018-09-05","objectID":"/posts/ec12c039.html/:3:3","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(8) - 添加评论系统","uri":"/posts/ec12c039.html/"},{"categories":["Hexo瞎折腾系列"],"content":"初始化Gitment 到这里为止已经全部配置完毕，接下来只需要登陆你的个人站点，然后手动给每篇文章初始化Gitment就行了。初始化也很简单，打开每篇文章，在下方的评论模块那里点一下初始化就行，以后就可以直接评论了。据说由一键初始化所有文章的脚本，我没用过，不清楚。 ","date":"2018-09-05","objectID":"/posts/ec12c039.html/:3:4","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(8) - 添加评论系统","uri":"/posts/ec12c039.html/"},{"categories":["Hexo瞎折腾系列"],"content":"Gitment踩坑记录 这里说一下当初折腾了我很久的一个地方，在主题配置文件里有个github_user，这个由于注释写的是Your Github ID，我误以为是要填写的不是用户昵称，而是一串数字id。于是就去了GitHub的api里查看了自己的id，然后填了一串数字进去，之后花费了我几个小时的时间，始终有授权失败的错误，最后终于发现，这个ID其实是要填的用户昵称…orz GitHub的api地址：https://api.github.com/users/xxx 把这里的xxx随便改成某个用户名，可以拿到对方的json数据，里边有各种用户首页上的数据信息。 更多Gitment踩坑相关的文章可以参考：Gitment评论功能接入踩坑教程 ","date":"2018-09-05","objectID":"/posts/ec12c039.html/:4:0","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(8) - 添加评论系统","uri":"/posts/ec12c039.html/"},{"categories":["Hexo瞎折腾系列"],"content":"来必力livere的使用 来必力的使用就简单多了，直接去官网注册个账号，拿到来必力City版安装代码里的data-uid，把这个uid填写到主题配置文件里的livere_uid后就行，记得id要和前边的冒号之间有一个空格，否则在启用hexo服务的时候会解析出错。 这样我们的来必力就使用成功了，平时可以去来必力的后台系统查看站点的评论数据等。 如果不会注册安装来必力的，可以看看这篇文章 ","date":"2018-09-05","objectID":"/posts/ec12c039.html/:5:0","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(8) - 添加评论系统","uri":"/posts/ec12c039.html/"},{"categories":["Hexo瞎折腾系列"],"content":"参考链接 Hexo 使用Gitment评论功能 Gitalk：一个基于 Github Issue 和 Preact 开发的评论插件 添加网易云跟帖(跟帖关闭，已失效，改为来必力) ","date":"2018-09-05","objectID":"/posts/ec12c039.html/:6:0","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(8) - 添加评论系统","uri":"/posts/ec12c039.html/"},{"categories":["Hexo瞎折腾系列"],"content":"问题 今天我的个人站点SSL/TLS证书到期，我的证书是由Coding Pages提供的，每次申请成功后有效期是三个月，证书到期后可以继续免费申请。但是当我登陆进入Coding Pages服务的后台并点击申请证书时，竟然报错了！！ 我重新点了申请，几秒后依然报错，并提示我半小时只能申请一次。我查看了下报错的提示信息，如下： urn:acme:error:unauthorized:Invalid response from http://exmaple.com/.well-known/acme-challenge/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: xxxxxxxxx 一时间也不明白是怎么回事，因为我第一次申请的时候不用几秒钟就成功了，由于报错信息中包含了本静态博客的部署时间，我以为可能存在部署时间的校验，于是重新部署了一下，半小时后继续申请，依然报同样的错误。 好吧，有事就问度娘，百度了一下，发现了Coding Pages的官方文件：Coding Pages 常见问题 这时候按照官方文件的指引，找到了和我一样的错误信息的解决方案： 错误原因：无法获取正确的域名验证信息 解决方式1：检查 DNS 的 CNAME 记录是否设置正确，静态 Pages 为 pages.coding.me，动态 Pages 为 pages.coding.io 解决方式2：检查域名的 DNS 是否将海外线路解析到 Coding Pages 的服务器 因为Coding Pages的静态Pages是免费的，而动态Pages是收费的，对于用Hexo搭建的静态站点，自然是选择免费的静态Pages服务就足够了。于是解决方式1对我来说就不存在了，接着联想到之前我对部署在GitHub Pages上的个人站点进行了自定义域名绑定+域名解析设置，有些豁然开朗的感觉。 ","date":"2018-09-03","objectID":"/posts/7ac531d2.html/:1:0","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(7) - Coding Pages申请SSL/TLS证书错误","uri":"/posts/7ac531d2.html/"},{"categories":["Hexo瞎折腾系列"],"content":"分析 由于我的个人站点是同时部署到GitHub Pages和Coding Pages上的，接着在阿里云域名解析里进行了配置：默认的解析线路将我的域名指向pages.coding.me，国外的解析路线则是指向了lewky.github.io。 之所以这样配置，是因为国内部分地区无法直接访问GitHub，自然就无法访问我部署在GitHub上的个人站点，于是我又选择了Coding.net的Pages服务，这样国内用户就可以快速访问到我部署在Coding Pages的个人站点，而国外用户则是快速访问到Coding Pages上的个人站点。 问题就出现在这里，因为我第一次申请SSL/TLS证书的时候，还没有解析境外的线路，所以很快就申请成功了。后来添加了国外线路的解析，这导致在Coding Pages的后台申请证书时无法通过验证，自然就申请失败了。 分析到这里，我也基本知道怎么解决这个错误了。 ","date":"2018-09-03","objectID":"/posts/7ac531d2.html/:2:0","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(7) - Coding Pages申请SSL/TLS证书错误","uri":"/posts/7ac531d2.html/"},{"categories":["Hexo瞎折腾系列"],"content":"解决方法 由于我是在阿里云购买的域名，于是登陆到阿里云域名解析的后台系统，打开个人域名的解析设置，暂停对于境外线路的解析。这里暂停就行了，一般来说大概需要5分钟左右的生效时间，毕竟DNS解析是存在缓存的。 五分钟后，我又进入Coding Pages服务的后台，再一次申请SSL/TLS证书，果不其然，几秒钟后我申请证书成功，又给续了三个月。 最后，再次返回阿里云域名解析的后台，将境外解析的线路再次启用，嗯，完美。 ","date":"2018-09-03","objectID":"/posts/7ac531d2.html/:3:0","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(7) - Coding Pages申请SSL/TLS证书错误","uri":"/posts/7ac531d2.html/"},{"categories":["Hexo瞎折腾系列"],"content":"其他的申请错误 这里罗列下申请证书时所有可能遇到的错误与解决方案，以备不时之需。 ","date":"2018-09-03","objectID":"/posts/7ac531d2.html/:4:0","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(7) - Coding Pages申请SSL/TLS证书错误","uri":"/posts/7ac531d2.html/"},{"categories":["Hexo瞎折腾系列"],"content":"错误类型：urn:acme:error:connection 1、错误信息：DNS problem: NXDOMAIN looking up A for example.com 错误原因：域名不存在 解决方式1：检查域名是否填写正确 解决方式2：到域名注册商处检查是否设置了 DNS 服务器 解决方式3：咨询 DNS 服务商是否支持解析该域名 2、错误信息：DNS problem: SERVFAIL looking up A for exmaple.com 错误原因：DNS 解析 A 记录出错 解决方式1：到域名注册商处检查是否设置了 DNS 服务器 解决方式2：咨询 DNS 服务商是否屏蔽了 Let’s Encrypt 的解析请求 3、错误信息：DNS problem: SERVFAIL looking up CAA for example.com 错误原因：DNS 解析 CAA 记录出错 解决方式1：到域名注册商处检查是否设置了 DNS 服务器 解决方式2：咨询 DNS 服务商是否支持解析 CAA 记录 4、错误信息：DNS problem: query timed out looking up A for exmaple.com 错误原因：DNS 解析超时 解决方式1：到域名注册商处检查是否设置了 DNS 服务器 解决方式2：咨询 DNS 服务商是否屏蔽了 Let’s Encrypt 的解析请求 解决方式3：重新申请 解决方式4：检查域名的 DNS 是否将海外线路解析到 Coding Pages 的服务器 5、错误信息：Fetching http://exmaple.com/.well-known/acme-challenge/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: xxxxxxxx 错误原因：获取域名验证信息失败 解决方式1：重新申请 解决方式2：请确认是否启动了 DNS 的分区解析。如果有则要把国外的解析记录也设置成 CNAME 至 pages.coding.me。SSL 证书是通过 Let’s Encrypt API 申请。申请证书前需要验证域名，而 Let’s Encrypt 位于国外，所以需要保证 Let’s Encrypt 能通过您的域名正常访问到 Coding Pages 服务器以读取验证信息。 ","date":"2018-09-03","objectID":"/posts/7ac531d2.html/:4:1","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(7) - Coding Pages申请SSL/TLS证书错误","uri":"/posts/7ac531d2.html/"},{"categories":["Hexo瞎折腾系列"],"content":"错误类型：urn:acme:error:malformed 错误信息：Error creating new authz :: Name does not end in a public suffix 错误原因：域名不以公共后缀结尾 解决方式：咨询域名注册商 ","date":"2018-09-03","objectID":"/posts/7ac531d2.html/:4:2","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(7) - Coding Pages申请SSL/TLS证书错误","uri":"/posts/7ac531d2.html/"},{"categories":["Hexo瞎折腾系列"],"content":"错误类型：urn:acme:error:unauthorized 1、错误信息：Invalid response from http://exmaple.com/.well-known/acme-challenge/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: xxxxxxxxx 错误原因：无法获取正确的域名验证信息 解决方式1：检查 DNS 的 CNAME 记录是否设置正确，静态 Pages 为 pages.coding.me，动态 Pages 为 pages.coding.io 解决方式2：检查域名的 DNS 是否将海外线路解析到 Coding Pages 的服务器 2、错误信息：The key authorization file from the server did not match this challenge 错误原因：无法获取正确的域名验证信息 解决方式1：检查 DNS 的 CNAME 记录是否设置正确，静态 Pages 为 pages.coding.me，动态 Pages 为 pages.coding.io 解决方式2：检查域名的 DNS 是否将海外线路解析到 Coding Pages 的服务器 3、错误信息：Error creating new authz :: “example.com” was considered an unsafe domain by a third-party API 错误原因：无法获取正确的域名验证信息 解决方式：使用 https://transparencyreport.google.com/safe-browsing/search 查看域名存在的安全隐患，按照说明进行清理，清理完后到 https://www.stopbadware.org/ 提交审查请求。审查通过后，回到 Coding Pages 重新申请证书 ","date":"2018-09-03","objectID":"/posts/7ac531d2.html/:4:3","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(7) - Coding Pages申请SSL/TLS证书错误","uri":"/posts/7ac531d2.html/"},{"categories":["Hexo瞎折腾系列"],"content":"错误类型：urn:acme:error:unknownHost 错误信息：No valid IP addresses found for example.com 错误原因：找不到可用 IP 地址 解决方式1：检查 DNS 的 CNAME 记录是否设置正确，静态 Pages 为 pages.coding.me，动态 Pages 为 pages.coding.io 解决方式2：检查域名的 DNS 是否将海外线路解析到 Coding Pages 的服务器 解决方式3：咨询 DNS 服务商是否屏蔽了 Let’s Encrypt 的解析请求 ","date":"2018-09-03","objectID":"/posts/7ac531d2.html/:4:4","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(7) - Coding Pages申请SSL/TLS证书错误","uri":"/posts/7ac531d2.html/"},{"categories":["Hexo瞎折腾系列"],"content":"错误类型：urn:acme:error:rateLimited 错误信息：Error creating new cert :: too many certificates already issued for exact set of domains: example.com 错误原因：证书申请数目超出限制 解决方式：下周再重新申请，详情见 https://letsencrypt.org/docs/rate-limits/ ","date":"2018-09-03","objectID":"/posts/7ac531d2.html/:4:5","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(7) - Coding Pages申请SSL/TLS证书错误","uri":"/posts/7ac531d2.html/"},{"categories":["Hexo瞎折腾系列"],"content":"错误类型：urn:acme:error:rejectedIdentifier 错误信息：Error creating new authz :: Policy forbids issuing for name 错误原因：相关政策禁止为此域名签发证书 ","date":"2018-09-03","objectID":"/posts/7ac531d2.html/:4:6","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(7) - Coding Pages申请SSL/TLS证书错误","uri":"/posts/7ac531d2.html/"},{"categories":["Hexo瞎折腾系列"],"content":"参考链接 Coding Pages的官方文件：Coding Pages 常见问题 ","date":"2018-09-03","objectID":"/posts/7ac531d2.html/:5:0","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(7) - Coding Pages申请SSL/TLS证书错误","uri":"/posts/7ac531d2.html/"},{"categories":["Eclipse"],"content":"问题与分析 最近遇到个奇怪的问题，在Eclipse里对一个Maven项目进行Update Project(快捷键是 Alt+F5)，原本jdk为1.8的项目忽然就变成了1.5，于是就报了一些错误。 我猜想可能跟Maven默认的jdk版本有关系，百度了下，确实如此，Maven项目如果不指定编译的jdk版本，就会默认为jdk1.5。查了下项目的pom文件，里边并没有指定编译的jdk版本，而Maven的配置文件settings.xml里也没有指明jdk版本，所以当我Update Project后，这个Maven项目就会自动变成jdk1.5了。 ","date":"2018-09-02","objectID":"/posts/519a131c.html/:1:0","tags":["IDE工具","Eclipse","Maven"],"title":"Eclipse - Maven项目Update Project后jdk版本变成1.5","uri":"/posts/519a131c.html/"},{"categories":["Eclipse"],"content":"解决方法 有两种解决方法，一种是针对某个Maven项目而言，直接在pom文件中指明jdk版本；一种是全局设置，为所有Maven项目指明jdk版本。 ","date":"2018-09-02","objectID":"/posts/519a131c.html/:2:0","tags":["IDE工具","Eclipse","Maven"],"title":"Eclipse - Maven项目Update Project后jdk版本变成1.5","uri":"/posts/519a131c.html/"},{"categories":["Eclipse"],"content":"在pom文件中指明jdk版本 在项目的pom.xml中的build节点里使用maven的编译插件来指定jdk版本，项目中通常使用这种方法来指定，因为比较灵活，可以随意指定版本，修改保存后即可生效。 \u003cbuild\u003e \u003cplugins\u003e \u003cplugin\u003e \u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e \u003cartifactId\u003emaven-compiler-plugin\u003c/artifactId\u003e \u003cversion\u003e3.1\u003c/version\u003e \u003cconfiguration\u003e \u003cencoding\u003eUTF-8\u003c/encoding\u003e \u003csource\u003e1.8\u003c/source\u003e \u003ctarget\u003e1.8\u003c/target\u003e \u003c/configuration\u003e \u003c/plugin\u003e \u003c/plugins\u003e \u003c/build\u003e ","date":"2018-09-02","objectID":"/posts/519a131c.html/:2:1","tags":["IDE工具","Eclipse","Maven"],"title":"Eclipse - Maven项目Update Project后jdk版本变成1.5","uri":"/posts/519a131c.html/"},{"categories":["Eclipse"],"content":"修改settings.xml文件 找到Maven的安装路径，打开conf\\settings.xml，找到profiles节点，在该节点下添加一个profile节点： \u003cprofile\u003e \u003cid\u003ejdk-1.8\u003c/id\u003e \u003cactivation\u003e \u003cjdk\u003e1.8\u003c/jdk\u003e \u003cactiveByDefault\u003etrue\u003c/activeByDefault\u003e \u003c/activation\u003e \u003cproperties\u003e \u003cmaven.compiler.source\u003e1.8\u003c/maven.compiler.source\u003e \u003cmaven.compiler.target\u003e1.8\u003c/maven.compiler.target\u003e \u003cmaven.compiler.compilerVersion\u003e1.8\u003c/maven.compiler.compilerVersion\u003e \u003c/properties\u003e \u003c/profile\u003e 使用这种方法的好处是所有Maven项目都会按照这里的jdk版本来编译，当然如果在pom文件里也指定了jdk版本，则以pom里的为准。这种全局修改的方法必须要重启Eclipse才有效果。 个人建议就算是修改了全局配置，也要在每个Maven项目里指明jdk版本，这是种良好的规范，利于别人理解。 ","date":"2018-09-02","objectID":"/posts/519a131c.html/:2:2","tags":["IDE工具","Eclipse","Maven"],"title":"Eclipse - Maven项目Update Project后jdk版本变成1.5","uri":"/posts/519a131c.html/"},{"categories":["Eclipse"],"content":"参考链接 maven 修改默认的JDK版本 Maven管理项目的时候 Update Project后jre变成1.5 ","date":"2018-09-02","objectID":"/posts/519a131c.html/:3:0","tags":["IDE工具","Eclipse","Maven"],"title":"Eclipse - Maven项目Update Project后jdk版本变成1.5","uri":"/posts/519a131c.html/"},{"categories":["Hexo瞎折腾系列"],"content":"前言 由于本人只是将Hexo博客同时部署到 Github 和 Coding.net ，所以这里只介绍怎么同时部署到这两个网站的pages。 之所以选择这两个网站，是因为国外用户可以访问 Github，而国内用户可以访问 Coding.net。另外，Coding.net可以拥有自己的私人仓库。 ","date":"2018-08-27","objectID":"/posts/369cf01c.html/:1:0","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(6) - 将博客同时部署到Github和Coding","uri":"/posts/369cf01c.html/"},{"categories":["Hexo瞎折腾系列"],"content":"修改站点配置文件 在站点根目录下找到 _config.yml文件，将里边的deploy节点修改成下边的形式： # Deployment ## Docs: https://hexo.io/docs/deployment.html deploy: type: git repo: github: git@github.com:{username}/{repository}.git,master coding: git@git.coding.net:{username}/{repository}.git,master 将上边的仓库url的{username}/{repository}改成自己的项目地址，这里使用的是SSH协议的Git仓库地址，即： git@{domain}:{username}/{repository}.git 还有一种是HTTPS协议的Git仓库地址，即： https://{domain}/{username}/{repository}.git 一般推荐使用SSH协议的地址，因为可以免去每次push都要输入账号密码的繁琐，而且也够安全。 ","date":"2018-08-27","objectID":"/posts/369cf01c.html/:2:0","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(6) - 将博客同时部署到Github和Coding","uri":"/posts/369cf01c.html/"},{"categories":["Hexo瞎折腾系列"],"content":"在 Github 和 Coding.net 上各自创建一个仓库 如果我们只是将项目部署到某一个代码托管站点而已，那么该项目仓库的名字可以随便起；但是现在我们需要将项目同时部署到 Github 和 Coding.net 上，那就不能随意命名了。 我们需要采用特定的命名方式，才能正确将Hexo博客同时部署到这两个站点上；否则很可能会导致只有博客的主页能访问到，而其他的路径全部失效。 ","date":"2018-08-27","objectID":"/posts/369cf01c.html/:3:0","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(6) - 将博客同时部署到Github和Coding","uri":"/posts/369cf01c.html/"},{"categories":["Hexo瞎折腾系列"],"content":"仓库的命名 对于 Coding.net，你可以选择建立一个私人仓库来部署自己的Hexo博客，不过和 Github 不同的地方在于： Github 的仓库名要命名为： {username}.github.io 而 Coding.net 的仓库名要命名为： {username} 这里的 username 指的是你在这两个网站上的用户名，只有以这种命名形式的仓库，才能够不通过子域名的形式来访问我们的博客。 比如说，我的 Github 和Coding.net 的账号都是lewky，那么在部署博客成功后，我就可以通过下边的url来访问我的Hexo博客： https://lewky.github.io/ https://lewky.coding.me/ 如果将仓库名命名为其他的形式，比如：hexo-blog，那么要访问该博客，就需要输入下边的url： https://lewky.github.io/hexo-blog https://lewky.coding.me/hexo-blog 这里的仓库名hexo-blog就变成了子域名，于是问题就来了，对于存在子域名的Hexo博客，需要在站点配置文件里配置url节点： # URL ## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/' url: http://yoursite.com root: / permalink: :year/:month/:day/:title/ permalink_defaults: 如果不配置这里的url节点，会导致除了首页以外的所有页面都请求404；但是我们由于是同时部署在两个网站上，其父域名是不一样的，那么这里的url节点也就只能配置一个而牺牲另一个了；但是如果你有自己的域名，就可以解决这个问题了：直接在这里配置自己的域名就行了。 ","date":"2018-08-27","objectID":"/posts/369cf01c.html/:3:1","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(6) - 将博客同时部署到Github和Coding","uri":"/posts/369cf01c.html/"},{"categories":["Hexo瞎折腾系列"],"content":"配置 SSH key ","date":"2018-08-27","objectID":"/posts/369cf01c.html/:4:0","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(6) - 将博客同时部署到Github和Coding","uri":"/posts/369cf01c.html/"},{"categories":["Hexo瞎折腾系列"],"content":"创建RSA密钥对 使用 Git Bash 生成RSA密钥对： ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" 看到提示就按一次回车，在连续三次回车后，就表示创建成功了。 接着将 ~/.ssh 目录下将里边的 id_rsa.pub 文件里的内容复制到剪切板。 ","date":"2018-08-27","objectID":"/posts/369cf01c.html/:4:1","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(6) - 将博客同时部署到Github和Coding","uri":"/posts/369cf01c.html/"},{"categories":["Hexo瞎折腾系列"],"content":"Github 配置 SSH key 登陆 Github 的账号： 进入 Settings 页面 选择 SSH and GPG keys 点击 New SSH key 填写 Title（用来给公钥起一个名字，以便和其他的公钥区分开来） 然后在 Key 里将我们刚刚复制的公钥复制进去 最后点击 Add SSH key，这时候 GitHub 会要你输入账号密码进行确认。 ","date":"2018-08-27","objectID":"/posts/369cf01c.html/:4:2","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(6) - 将博客同时部署到Github和Coding","uri":"/posts/369cf01c.html/"},{"categories":["Hexo瞎折腾系列"],"content":"Coding.net 配置 SSH key Coding.net 和 Github 有些不一样，Coding.net存在账户公钥和部署公钥； 账户公钥配置后拥有账户下所有项目的读写权限 部署公钥配置后默认拥有该项目的只读权限，如果需要获取推送权限，需要勾选部署公钥设置里的『授予推送权限』 登陆 Coding.net 的账号： 进入个人设置 选择 SSH 公钥 选择新增公钥 填写公钥名称和内容 添加后输入输入账号密码进行确认 ","date":"2018-08-27","objectID":"/posts/369cf01c.html/:4:3","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(6) - 将博客同时部署到Github和Coding","uri":"/posts/369cf01c.html/"},{"categories":["Hexo瞎折腾系列"],"content":"验证 SSH 连接 使用 Git Bash 输入： ssh -T git@github.com 第一次连接时会问你是否继续连接，输入 yes 即可；接下来验证 Coding.net 的ssh连接： ssh -T git@git.coding.net 同样输入 yes 即可。 如果按照前边说的来配置，这里的 SSH 验证应该都是没问题的。 接下来只要撰写博文，然后使用命令进行部署就行了： hexo clean hexo g -d ","date":"2018-08-27","objectID":"/posts/369cf01c.html/:5:0","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(6) - 将博客同时部署到Github和Coding","uri":"/posts/369cf01c.html/"},{"categories":["Hexo瞎折腾系列"],"content":"为什么要压缩页面静态资源 对于个人博客来说，优化页面的访问速度是很有必要的，如果打开你的个人站点，加载个首页就要十几秒，页面长时间处于空白状态，想必没什么人能够忍受得了吧。我个人觉得，如果能把页面的加载时间控制在三四秒内，就很不错了。 那么怎么提高hexo这个静态博客的页面加载速度呢？可以从以下的几个方面去入手： 将js文件尽可能放置到body的闭合标签之前，因为在加载或者引入js文件时是阻塞式的，如果我们在页面的最开始就引入这些js文件，而这些文件又比较大，会造成页面在渲染时长时间处于白屏状态。 尽量避免去引用访问速度非常低下的cdn或者图片，可以改用访问速度更快的cdn，或者将难以迅速加载的图片保存到自己的站点目录下，以免在加载图片时耗费了大量的时间，最后还加载不出来。 对页面的静态资源进行压缩，包括css、js和html等文件。我们自己添加的css和js文件为了可读性，往往会有很多换行和空格，这些对于浏览器来说并没什么卵用，甚至还会降低渲染页面的速度。至于html文件，由于Markdown转成html的bug，会导致页面存在大量的空白，如果你查看下页面的源代码，就会发现这些大量的空白符，十分难看。这也会造成页面渲染的性能问题。 ","date":"2018-08-25","objectID":"/posts/f90c8f1a.html/:1:0","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(5) - 使用hexo-neat插件压缩页面静态资源","uri":"/posts/f90c8f1a.html/"},{"categories":["Hexo瞎折腾系列"],"content":"hexo的压缩静态资源插件 网上有很多相关的博文，常规的做法是使用gulp来进行压缩，gulp是Node.js下的自动构建工具，通过一列的task执行步骤进行自动流程化处理。 使用这种方法会比较麻烦，每次压缩时还需要输入额外的命令，比较繁琐，个人不是很喜欢，有兴趣的可以去自己了解下相关的东西。这篇教程里很多详细的说明，里边有说到gulp的使用，绝对的精品文章。 这里我选择的是由rozbo大佬开发的hexo-neat压缩插件，配置简单，无需额外命令，你只要使用原本的调试三连或者部署三连就可以自动帮你完成静态资源的压缩！ ","date":"2018-08-25","objectID":"/posts/f90c8f1a.html/:2:0","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(5) - 使用hexo-neat插件压缩页面静态资源","uri":"/posts/f90c8f1a.html/"},{"categories":["Hexo瞎折腾系列"],"content":"如何使用hexo-neat ","date":"2018-08-25","objectID":"/posts/f90c8f1a.html/:3:0","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(5) - 使用hexo-neat插件压缩页面静态资源","uri":"/posts/f90c8f1a.html/"},{"categories":["Hexo瞎折腾系列"],"content":"在站点根目录下安装hexo-neat npm install hexo-neat --save ","date":"2018-08-25","objectID":"/posts/f90c8f1a.html/:3:1","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(5) - 使用hexo-neat插件压缩页面静态资源","uri":"/posts/f90c8f1a.html/"},{"categories":["Hexo瞎折腾系列"],"content":"为站点配置文件添加相关配置 下边是我自己站点的相关配置，直接添加到站点配置文件_config.yml的末尾就可以。可以安装自己的需求去自定义配置，不过有些注意事项，可以参考我后文的踩坑记录。 # hexo-neat # 博文压缩 neat_enable: true # 压缩html neat_html: enable: true exclude: # 压缩css neat_css: enable: true exclude: - '**/*.min.css' # 压缩js neat_js: enable: true mangle: true output: compress: exclude: - '**/*.min.js' - '**/jquery.fancybox.pack.js' - '**/index.js' ","date":"2018-08-25","objectID":"/posts/f90c8f1a.html/:3:2","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(5) - 使用hexo-neat插件压缩页面静态资源","uri":"/posts/f90c8f1a.html/"},{"categories":["Hexo瞎折腾系列"],"content":"hexo-neat插件踩坑记录 由于在使用hexo-neat插件时，可以在命令窗口中看到各个文件的压缩率，于是我就开始捣鼓跳过哪些文件可以让效率更高。在鼓捣了一段时间之后，记录下使用该插件的一些注意事项，避免日后重蹈覆辙，也希望能对各位看官有所帮助。 ","date":"2018-08-25","objectID":"/posts/f90c8f1a.html/:4:0","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(5) - 使用hexo-neat插件压缩页面静态资源","uri":"/posts/f90c8f1a.html/"},{"categories":["Hexo瞎折腾系列"],"content":"跳过压缩文件的正确配置方式 如果按照官方插件的文档说明来配置exclude，你会发现完全不起作用。这是因为配置的文件路径不对，压缩时找不到你配置的文件，自然也就无法跳过了。你需要给这些文件指定正确的路径，万能的配置方式如下： neat_css: enable: true exclude: - '**/*.min.css' ","date":"2018-08-25","objectID":"/posts/f90c8f1a.html/:4:1","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(5) - 使用hexo-neat插件压缩页面静态资源","uri":"/posts/f90c8f1a.html/"},{"categories":["Hexo瞎折腾系列"],"content":"压缩html时不要跳过.md文件 .md文件就是我们写文章时的markdown文件，如果跳过压缩.md文件，而你又刚好在文章中使用到了NexT自带的tab标签，那么当hexo在生成静态页面时就会发生解析错误。这会导致使用到了tab标签的页面生成失败而无法访问。 当初为了找到这个原因花了我两个晚上的时间，简直是夜不能寐。 ","date":"2018-08-25","objectID":"/posts/f90c8f1a.html/:4:2","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(5) - 使用hexo-neat插件压缩页面静态资源","uri":"/posts/f90c8f1a.html/"},{"categories":["Hexo瞎折腾系列"],"content":"压缩html时不要跳过.swig文件 .swig文件是模板引擎文件，简单的说hexo可以通过这些文件来生成对应的页面。如果跳过这些文件，那么你将会发现，你的所有页面完全没有起到压缩的效果，页面源代码里依然存在着一大堆空白。 ","date":"2018-08-25","objectID":"/posts/f90c8f1a.html/:4:3","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(5) - 使用hexo-neat插件压缩页面静态资源","uri":"/posts/f90c8f1a.html/"},{"categories":["Hexo瞎折腾系列"],"content":"参考链接 GitHub项目地址 hexo博客压缩优化 Hexo-Neat介绍 ","date":"2018-08-25","objectID":"/posts/f90c8f1a.html/:5:0","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(5) - 使用hexo-neat插件压缩页面静态资源","uri":"/posts/f90c8f1a.html/"},{"categories":["Hexo瞎折腾系列"],"content":"文章摘要设置 打开主题配置文件 _config.yml 文件，找到如下： # Automatically Excerpt. Not recommend. # Please use \u003c!-- more --\u003e in the post to control excerpt accurately. auto_excerpt: enable: false length: 150 把这里的false改为true就可以了在首页启动显示文章预览了，length是显示预览的长度。 这里我们可以通过在文章使用\u003c!-- more --\u003e标志来精确控制文章的摘要预览，比如这篇文章就是在这个段落的末尾添加了该标志，所以本文在首页的预览就会显示到这个段落为止。 强烈推荐使用该\u003c!-- more --\u003e标志来控制文章的摘要预览，因为这种方式可以让摘要也按照css文件中的样式来渲染。如果使用了自动摘要的功能，你会发现文章摘要是一大团没有样式的文本，很是难看。 ","date":"2018-07-20","objectID":"/posts/62111.html/:1:0","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(4) - 站点首页不显示文章全文","uri":"/posts/62111.html/"},{"categories":["Hexo瞎折腾系列"],"content":"其他的文章配置 # --------------------------------------------------------------- # Post Settings # --------------------------------------------------------------- # Automatically scroll page to section which is under \u003c!-- more --\u003e mark. # 自动将页面滚动到\u003c!-- more --\u003e标记下的地方。 scroll_to_more: false # Automatically saving scroll position on each post/page in cookies. # 自动保存每篇文章或页面上一次滚动的地方。 save_scroll: false # Automatically excerpt description in homepage as preamble text. # 自动在首页对文章进行摘要描述作为前言文本。 excerpt_description: true # Automatically Excerpt. Not recommend. # Please use \u003c!-- more --\u003e in the post to control excerpt accurately. # 不推荐使用自动摘要。 # 请在文章中使用\u003c!-- more --\u003e标志来精确控制摘要长度。 auto_excerpt: enable: true length: 200 # Post meta display settings # 文章元数据展示设置 post_meta: # 文本显示 item_text: true # 创建时间 created_at: true # 更新时间 # 这个更新时间有点问题，因为每次重新生成文章/部署时都会刷新更新时间，不建议使用 updated_at: false # 目录分类 categories: true # Post wordcount display settings # Dependencies: https://github.com/willin/hexo-wordcount # 文章字数展示设置 post_wordcount: # 文本显示 item_text: true # 文章字数统计 wordcount: true # 阅读时长 min2read: true # 站点总字数统计 totalcount: true # 该post_wordcount的所有设置另起一行显示 separated_meta: true ","date":"2018-07-20","objectID":"/posts/62111.html/:2:0","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(4) - 站点首页不显示文章全文","uri":"/posts/62111.html/"},{"categories":["Hexo瞎折腾系列"],"content":"页面右上角添加GitHub彩带 你可以在这里找到一共12种样式的GitHub彩带，复制其中的超链代码。 在themes\\next\\layout\\_layout.swig目录下找到头部彩带相关的代码： \u003cdiv class=\"headband\"\u003e\u003c/div\u003e 在这里的div标签内部添加我们刚刚复制的超链代码，并修改超链指向你的GitHub地址： \u003cdiv class=\"headband\"\u003e \u003ca href=\"https://github.com/lewky\"\u003e\u003cimg style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_red_aa0000.png\" alt=\"Fork me on GitHub\"\u003e\u003c/a\u003e \u003c/div\u003e 当然我本人并不是很推荐用这种方法，因为这个超链使用的图片有时候会加载很久，最后图片还是挂掉了，我是直接将图片保存到站点的images目录下，然后直接使用自己站点的图片，这样可以避免加载过久甚至图片挂掉的情况。 \u003cdiv class=\"headband\"\u003e \u003ca href=\"https://github.com/lewky\" target=\"_blank\"\u003e\u003cimg style=\"position: absolute; top: 0; right: 0; border: 0;\" src=\"/images/headband/forkme_right_red.png\" alt=\"Fork me on GitHub\"\u003e\u003c/a\u003e \u003c/div\u003e 我只找到了10张彩带图片，可以直接在我的GitHub项目中找到这些图片并复制到自己的站点上。 ","date":"2018-07-19","objectID":"/posts/844109c2.html/:1:0","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(3) - 添加GitHub彩带和GitHub Corner","uri":"/posts/844109c2.html/"},{"categories":["Hexo瞎折腾系列"],"content":"页面右上角添加GitHub Corner 这是我后来在其他博客中见到的，可能是6.x.x版本的NexT主题自带的，由于我使用的主题版本较低，只能自己添加了。 还是在themes\\next\\layout\\_layout.swig目录下，找到如下代码： \u003cheader id=\"header\" class=\"header\" itemscope itemtype=\"http://schema.org/WPHeader\"\u003e \u003cdiv class=\"header-inner\"\u003e {%- include '_partials/header.swig' %} \u003c/div\u003e \u003c/header\u003e 我们在这个header标签的下边，添加一个超链代码： \u003ca href=\"https://github.com/lewky\" class=\"github-corner\" target=\"_blank\" title=\"Follow me on GitHub\" aria-label=\"Follow me on GitHub\"\u003e \u003csvg width=\"80\" height=\"80\" viewBox=\"0 0 250 250\" style=\"fill:#222; color:#fff; position: absolute; top: 0; border: 0; right: 0;\" aria-hidden=\"true\"\u003e \u003cpath d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\"\u003e\u003c/path\u003e\u003cpath d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\" fill=\"currentColor\" style=\"transform-origin: 130px 106px;\" class=\"octo-arm\"\u003e\u003c/path\u003e \u003cpath d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\" fill=\"currentColor\" class=\"octo-body\"\u003e\u003c/path\u003e \u003c/svg\u003e \u003c/a\u003e 将上边的超链的href改为自己的GitHub地址，然后我们需要修改这个超链的样式，在上文中提及的themes/next/source/css/_custom/custom.styl里添加如下代码： /* GitHub Cornor */ .github-corner :hover .octo-arm { animation: octocat-wave 560ms ease-in-out; } @media (max-width: 991px) { .github-corner \u003esvg { fill: #fff !important; color: #222 !important; } .github-corner .github-corner:hover .octo-arm { animation: none; } .github-corner .github-corner .octo-arm { animation: octocat-wave 560ms ease-in-out; } } @-moz-keyframes octocat-wave { 0%, 100% { -webkit-transform: rotate(0); -moz-transform: rotate(0); -ms-transform: rotate(0); -o-transform: rotate(0); transform: rotate(0); } 20%, 60% { -webkit-transform: rotate(-25deg); -moz-transform: rotate(-25deg); -ms-transform: rotate(-25deg); -o-transform: rotate(-25deg); transform: rotate(-25deg); } 40%, 80% { -webkit-transform: rotate(10deg); -moz-transform: rotate(10deg); -ms-transform: rotate(10deg); -o-transform: rotate(10deg); transform: rotate(10deg); } } @-webkit-keyframes octocat-wave { 0%, 100% { -webkit-transform: rotate(0); -moz-transform: rotate(0); -ms-transform: rotate(0); -o-transform: rotate(0); transform: rotate(0); } 20%, 60% { -webkit-transform: rotate(-25deg); -moz-transform: rotate(-25deg); -ms-transform: rotate(-25deg); -o-transform: rotate(-25deg); transform: rotate(-25deg); } 40%, 80% { -webkit-transform: rotate(10deg); -moz-transform: rotate(10deg); -ms-transform: rotate(10deg); -o-transform: rotate(10deg); transform: rotate(10deg); } } @-o-keyframes octocat-wave { 0%, 100% { -webkit-transform: rotate(0); -moz-transform: rotate(0); -ms-transform: rotate(0); -o-transform: rotate(0); transform: rotate(0); } 20%, 60% { -webkit-transform: rotate(-25deg); -moz-transform: rotate(-25deg); -ms-transform: rotate(-25deg); -o-transform: rotate(-25deg); transform: rotate(-25deg); } 40%, 80% { -webkit-transform: rotate(10deg); -moz-transform: rotate(10deg); -ms-transform: rotate(10deg); -o-transform: rotate(10deg); transform: rotate(10deg); } } @keyframes octocat-wave { 0%, 100% { -webkit-transform: rotate(0); -moz-transform: rotate(0); -ms-transform: rotate(0); -o-transform: rotate(0); transform: rotate(0); } 20%, 60% { -webkit-transform: rotate(-25deg); -moz-transform: rotate(-25deg); -ms-transform: rotate(-25deg); -o-transform: rotate(-25deg); transform: rotate(-25deg); } 40%, 80% { -webkit-transform: rotate(10deg); -moz-transform: rotate(10deg); -ms-transform: rotate(10deg); -o-transform: rotate(10deg); tra","date":"2018-07-19","objectID":"/posts/844109c2.html/:2:0","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(3) - 添加GitHub彩带和GitHub Corner","uri":"/posts/844109c2.html/"},{"categories":["Hexo瞎折腾系列"],"content":"动态背景图片插件jquery-backstretch jquery-backstretch是一款简单的jQuery插件，可以用来设置动态的背景图片，以下是官方网站的介绍。 A simple jQuery plugin that allows you to add a dynamically-resized, slideshow-capable background image to any page or element. 可以直接在页面中引入该插件的cdn来调用函数，也可以直接下载下来使用，这是官方地址。 ","date":"2018-07-19","objectID":"/posts/576ee548.html/:1:0","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(2) - 添加背景图片轮播","uri":"/posts/576ee548.html/"},{"categories":["Hexo瞎折腾系列"],"content":"jquery-backstretch的使用方法 ","date":"2018-07-19","objectID":"/posts/576ee548.html/:2:0","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(2) - 添加背景图片轮播","uri":"/posts/576ee548.html/"},{"categories":["Hexo瞎折腾系列"],"content":"引入该插件的cdn 打开themes\\next\\layout\\_custom\\custom-foot.swig，引入该背景图片插件的cdn： {# Custom foot in body, Can add script here. #} \u003c!-- 图片轮播js文件cdn --\u003e \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery-backstretch/2.0.4/jquery.backstretch.min.js\"\u003e\u003c/script\u003e \u003c!-- 自定义的js文件 --\u003e \u003cscript type=\"text/javascript\" src=\"/js/src/custom.js\"\u003e\u003c/script\u003e 需要注意的是，我们要引入的插件cdn，都需要在自定义的js文件custom.js之前引入才行！否则，插件会在访问页面时无法生效，可以在浏览器的控制台看到报错。 ","date":"2018-07-19","objectID":"/posts/576ee548.html/:2:1","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(2) - 添加背景图片轮播","uri":"/posts/576ee548.html/"},{"categories":["Hexo瞎折腾系列"],"content":"调用backstretch函数 在themes\\next\\source\\js\\src\\custom.js中添加如下代码： /* 轮播背景图片 */ $(function () { $.backstretch([ \"/images/background/saber1.jpg\", \"/images/background/saber2.jpg\", \"/images/background/bg1.jpg\" ], { duration: 60000, fade: 1500 }); }); 这里可以随意添加你想要轮播的图片，但要确保图片路径是正确的，比如我的背景图片就存放在站点根目录下的images/background/目录下。 然后duration指的是轮换图片的时间，单位是毫秒，也就是说这里的代码表示一分钟就轮换到下一张图片； fade指的是轮换图片时会有个渐进渐出的动作，而这个过程需要花费的时间单位也是毫秒，如果不加上这个参数，就表示离开轮换成下一张图片。 注意这里的$.backstretch指的是对整个页面设置背景图片，我们也可以专门给某个元素设置背景图片，如下： $(function () { $(\".saber1\").backstretch([\"/images/background/saber1.jpg\"]); $(\".saber2\").backstretch([\"/images/background/saber2.jpg\"]); }); 如果只有一张图片，就没必要设置duration和fade参数了。 ","date":"2018-07-19","objectID":"/posts/576ee548.html/:2:2","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(2) - 添加背景图片轮播","uri":"/posts/576ee548.html/"},{"categories":["Hexo瞎折腾系列"],"content":"为背景图片设置样式 虽然我们设置好了背景图片，但如果页面的许多元素是不透明的，背景图片可能并不能很好地被看见，所以我们可以对背景图片和其他的页面元素进行设置样式。 首先为背景图片设置透明度，因为有的图片颜色比较深厚，而页面多为白色，然后造成喧宾夺主的感觉。 /* 背景图片透明度 */ .backstretch { opacity: .75; } 接下来设置页面元素透明度，需要注意的是，如果我们在主题配置文件中启用了搜索功能，那么就不能简单粗暴地直接将整个页面都设置透明度，这会导致搜索框失效，无法正常使用。原因是因为搜索框是通过jQuery临时添加的，如果整个页面都设置了透明度，会导致搜索框的z-index失效而无法触发点击事件。 我在折腾了一段时间后，终于想到了个取巧的方法，那就是将搜索框的父元素设置为白色透明的，而其他页面元素则直接设置透明度，如下： /* 页面透明度 */ .content-wrap, .sidebar { opacity: .9 !important; } .header-inner { background: rgba(255, 255, 255, 0.9) !important; } ","date":"2018-07-19","objectID":"/posts/576ee548.html/:2:3","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(2) - 添加背景图片轮播","uri":"/posts/576ee548.html/"},{"categories":["Hexo瞎折腾系列"],"content":"前言 网上有不少相关的帖子，不过版本会比较旧，而不同版本可能存在代码不同的问题，不过大部分还是大同小异，本系列就不啰嗦重复了，基本只会按照本人所使用的版本以及个人所使用到的内容来进行介绍。 该系列是对我所使用的Next主题进行个性化定制，涉及到js和css等的修改，还有各种插件的使用；另一个系列是针对Next主题进行一些写作技巧的介绍与运用，希望能对大家有所帮助。有疑问的朋友可以给我留言，我会尽可能回复O(∩_∩)O。 我所使用的Hexo和NexT的版本如下： hexo: 3.7.1 next: 5.1.4 ","date":"2018-07-11","objectID":"/posts/ef301a4d.html/:1:0","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(1) - 准备工作与简单美化","uri":"/posts/ef301a4d.html/"},{"categories":["Hexo瞎折腾系列"],"content":"关于配置文件 对于使用了Next主题的Hexo静态博客，存在着两个至关重要的配置文件_config.yml。在本系列中，统一将位于站点根目录下的该文件称为站点配置文件，将位于themes\\next目录下的该文件称为主题配置文件。 ","date":"2018-07-11","objectID":"/posts/ef301a4d.html/:2:0","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(1) - 准备工作与简单美化","uri":"/posts/ef301a4d.html/"},{"categories":["Hexo瞎折腾系列"],"content":"准备工作：添加美化博客的相关文件 本系列会使用到大量的css与JavaScript的相关内容，为了更有效率与可观赏性的美化博客，我们将这些美化相关的东西都尽可能地写到一类文件中，方便日后查询与修改。譬如下边的几个文件里，就存放了博客的大部分美化内容： themes/next/source/css/_custom/custom.styl themes/next/source/js/src/custom.js themes/next/layout/_partials/head/custom-head.swig themes/next/layout/_custom/custom-foot.swig 除了第一个文件custom.styl保存的是css代码，另外三个文件都是保存的js代码。这几个文件分别会在页面的以下位置中被引入： \u003chtml\u003e \u003chead\u003e .... {{ custom.styl }} //css .... {{ custom-head.swig }} //js .... \u003c/head\u003e \u003cbody\u003e .... .... {{ custom-foot.swig }} //js {{ custom.js }} //js \u003c/body\u003e \u003c/html\u003e 这里的custom.styl，custom-head.swig是原本的NexT主题自带的，另外两个是我自己添加的，之所以又添加了另外两个js文件，是因为在页面的不同地方引入js文件会对页面产生不一样的效果与影响。 ","date":"2018-07-11","objectID":"/posts/ef301a4d.html/:3:0","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(1) - 准备工作与简单美化","uri":"/posts/ef301a4d.html/"},{"categories":["Hexo瞎折腾系列"],"content":"添加 custom-foot.swig 文件 在themes/next/layout/_custom/目录下添加custom-foot.swig文件，该文件内容如下： {# Custom foot in body, Can add script here. #} \u003c!-- 自定义的js文件 --\u003e \u003cscript type=\"text/javascript\" src=\"/js/src/custom.js\"\u003e\u003c/script\u003e 接着修改themes\\next\\layout\\_layout.swig，在body标签的闭合标签前添加一行代码，表示将我们新添加的custom-foot.swig文件包括进去： \u003cbody\u003e .... {% include '_custom/custom-foot.swig' %} \u003c/body\u003e \u003c/html\u003e 这个文件的作用是负责引入我们想要的js文件，比如其他第三方js的cdn等等。因为页面在引入js文件时是阻塞式的，如果我们在页面的最开始就引入这些js文件，而这些文件又比较大，会造成页面在渲染时长时间处于白屏状态。 ","date":"2018-07-11","objectID":"/posts/ef301a4d.html/:3:1","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(1) - 准备工作与简单美化","uri":"/posts/ef301a4d.html/"},{"categories":["Hexo瞎折腾系列"],"content":"添加 custom.js 文件 在themes/next/source/js/src目录下添加custom.js文件，该文件用来存放我们自己写的js函数等等，需要注意的是，我们之前是在custom-foot.swig文件中的script标签里引入了该文件，也就是说，在该文件里，我们不能再自己添加script标签了，直接书写js函数就行了，如下所示： /* 返回随机颜色 */ function randomColor() { return \"rgb(\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\")\"; } ","date":"2018-07-11","objectID":"/posts/ef301a4d.html/:3:2","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(1) - 准备工作与简单美化","uri":"/posts/ef301a4d.html/"},{"categories":["Hexo瞎折腾系列"],"content":"页面的简单美化 由于很多大佬的博客都有很详尽的美化教程，这里我就不赘述了，只简单介绍下比较少人讲述到的部分简单美化。 ","date":"2018-07-11","objectID":"/posts/ef301a4d.html/:4:0","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(1) - 准备工作与简单美化","uri":"/posts/ef301a4d.html/"},{"categories":["Hexo瞎折腾系列"],"content":"改变页面的字体大小 打开 themes\\next\\source\\css\\_variables\\base.styl，该文件保存了一些基础变量的值，我们找到$font-size-base，将值改为16px。 // Font size $font-size-base = 16px 这个文件里定义了很多常量，有兴趣的可以自己去琢磨琢磨，修改一些其他的变量。 ","date":"2018-07-11","objectID":"/posts/ef301a4d.html/:4:1","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(1) - 准备工作与简单美化","uri":"/posts/ef301a4d.html/"},{"categories":["Hexo瞎折腾系列"],"content":"文章启用tags和categories 可能是该版本的NexT主题的关系，在我第一次使用NexT主题时，折腾了很久都没办法让菜单栏里的tags和categories的页面生效，一直显示白屏。后来终于在知乎找到答案，首先我们需要将某篇文章设置tags和categories，如下： --- title: Test tags: - MyTag categories: - MyCategory date: 20xx-xx-xx xx:xx:xx --- 接下来是重点了，首先确定是否已经在主题配置文件中启用了tags和categories这两个菜单，如下： menu: home: / || fas fa-home archives: /archives/ || fas fa-archive categories: /categories/ || fas fa-th tags: /tags/ || fas fa-tags 接着确定是否在source目录下是否已经存在tags和categories这两个文件夹，如果不存在需要运行下边的命令： hexo n page tags hexo n page categories 运行之后会在source目录下生成对应的两个文件夹，在文件夹下会存在一个index.md文件，打开这两个index.md文件，分别添加type: tags和type: categories，如下： --- title: 标签 date: 20xx-xx-xx xx:xx:xx type: tags --- --- title: 分类 date: 20xx-xx-xx xx:xx:xx type: categories --- 接下来重新使用本地调试三连，就可以看到tags和categories这两个菜单的页面显示正常了。 ","date":"2018-07-11","objectID":"/posts/ef301a4d.html/:4:2","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(1) - 准备工作与简单美化","uri":"/posts/ef301a4d.html/"},{"categories":["Hexo瞎折腾系列"],"content":"去掉图片边框 NexT主题默认会有图片边框，不太好看，我们可以把边框去掉。打开 themes\\next\\source\\css\\_custom\\custom.styl，添加如下CSS代码： /* 去掉图片边框 */ .posts-expand .post-body img { border: none; padding: 0px; } .post-gallery .post-gallery-img img { padding: 3px; } ","date":"2018-07-11","objectID":"/posts/ef301a4d.html/:4:3","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(1) - 准备工作与简单美化","uri":"/posts/ef301a4d.html/"},{"categories":["Hexo瞎折腾系列"],"content":"修改语法高亮的主题 语法高亮就是在引入代码时让代码呈现特定的样式，而在Markdown文件中语法高亮的使用方法是在引入代码的前一行添加三个反引号加上使用的语言名字，然后在引入代码的下一行使用三个反引号结尾。 如下所示的格式，就表示html代码的语法高亮： \u003ch2\u003eHello World!\u003c/h2\u003e 其源码如下： \u003ch2\u003eHello World!\u003c/h2\u003e 由于NexT默认的语法高亮的主题比较一般，我们可以换成其他的主题，比如我所使用的就是黑色的主题。 打开主题配置文件，修改如下配置： # 语法高亮主题 # Code Highlight theme # Available value: # normal | night | night eighties | night blue | night bright # https://github.com/chriskempson/tomorrow-theme highlight_theme: night eighties ","date":"2018-07-11","objectID":"/posts/ef301a4d.html/:4:4","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(1) - 准备工作与简单美化","uri":"/posts/ef301a4d.html/"},{"categories":["Hexo瞎折腾系列"],"content":"指定Markdown的解析器 上边我们设置了语法高亮后，虽然在本地调试没有问题，然而当我们将博客部署到GitHub Pages和 Coding Pages后却发现，前者的页面不支持语法高亮，而后者支持。百度后才知道原来是因为 GitHub 默认使用的 Markdown 解析器不支持语法高亮，解决方法如下： 打开站点配置文件_config.yml，在末尾添加如下内容： markdown: redcarpet redcarpet: extensions: [\"fenced_code_blocks\", \"autolink\", \"tables\", \"strikethrough\"] 接下来重新执行部署三连命令，就会发现 GitHub Pages 上部署的页面语法高亮显示成功了。 ","date":"2018-07-11","objectID":"/posts/ef301a4d.html/:4:5","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(1) - 准备工作与简单美化","uri":"/posts/ef301a4d.html/"},{"categories":["Hexo瞎折腾系列"],"content":"推荐一些写得很齐全的文章链接 hexo的next主题个性化配置教程 打造个性超赞博客Hexo+NexT+GithubPages的超深度优化 ","date":"2018-07-11","objectID":"/posts/ef301a4d.html/:4:6","tags":["Hexo","NexT主题个性化"],"title":"Hexo瞎折腾系列(1) - 准备工作与简单美化","uri":"/posts/ef301a4d.html/"},{"categories":null,"content":"\rHigh!!! 前方高能♂ 1.gif \" 1.gif 2.gif \" 2.gif ","date":"2018-06-18","objectID":"/high/:0:0","tags":null,"title":"Everybody~ High起来!","uri":"/high/"},{"categories":["Hexo"],"content":"今天安装了hexo-generator-baidu-sitemap后，运行hexo g报错如下： error.jpg \" error.jpg 到了作者的GitHub上发现也有人提了相关的issue，不过都过了相当一段时间了依然没有解决，最后还是自己动手丰衣足食，解决方法很简单，因为Hexo3.X.X版本改变了代码导致toArray()无法使用，我们直接将该方法去掉就行了。 打开 node_modules\\hexo-generator-baidu-sitemap\\baidusitemap.ejs，将这里边的 post.tags.toArray() 和 post.categories.toArray() 改成 post.tags 和 post.categories，简单的说就是把这里的 toArray() 去掉，新版本的Hexo的tags和categories可以直接遍历。 code.jpg \" code.jpg 接下来重新运行 hexo g 和 hexo s，本地调试成功~ ","date":"2018-06-12","objectID":"/posts/49fbb32a.html/:0:0","tags":["Hexo"],"title":"Hexo - 3.X.X版本无法生成baidusitemap","uri":"/posts/49fbb32a.html/"},{"categories":["NexT主题个性化"],"content":"安装插件及其使用方法 在站点根目录执行命令： npm uninstall hexo-generator-index --save npm install hexo-generator-index-pin-top --save 接下来在需要置顶的文章头部添加 top: true 或者 top: n，这里的n是数字，数字越大表示置顶等级越高。 title: XXX tags: - XXX categories: - XXX date: XXX top: 100 ","date":"2018-05-13","objectID":"/posts/6ed0d627.html/:1:0","tags":["Hexo","NexT主题个性化"],"title":"NexT主题个性化 - 添加文章置顶功能","uri":"/posts/6ed0d627.html/"},{"categories":["NexT主题个性化"],"content":"在文章标题下方添加置顶样式 打开 themes/next/layout/_macro/post.swig，在 \u003cdiv class=\"post-meta\"\u003e 下方添加如下代码： {% if post.top %} \u003cspan class=\"post-meta-item-icon\"\u003e \u003ci class=\"fa fa-thumb-tack\"\u003e\u003c/i\u003e \u003c/span\u003e \u003cfont color=\"red\"\u003e置顶\u003c/font\u003e \u003cspan class=\"post-meta-divider\"\u003e|\u003c/span\u003e {% endif %} encrypt.jpg \" encrypt.jpg ","date":"2018-05-13","objectID":"/posts/6ed0d627.html/:2:0","tags":["Hexo","NexT主题个性化"],"title":"NexT主题个性化 - 添加文章置顶功能","uri":"/posts/6ed0d627.html/"},{"categories":["NexT主题个性化"],"content":"安装搜索插件 在站点根目录使用 git bash 执行命令： npm install hexo-generator-searchdb --save ","date":"2018-05-13","objectID":"/posts/3e5e6b79.html/:1:0","tags":["Hexo","NexT主题个性化"],"title":"NexT主题个性化 - 启用搜索功能","uri":"/posts/3e5e6b79.html/"},{"categories":["NexT主题个性化"],"content":"启用搜索功能 打开主题配置文件 _config.yml，修改如下配置： # Local search # Dependencies: https://github.com/flashlab/hexo-generator-search # 本地搜索，需要安装 hexo-generator-search # 站点根目录执行：npm install hexo-generator-searchdb --save local_search: enable: true # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button # auto表示改变输入就自动触发搜索 # manual表示按下回车键或搜索按钮才触发搜索 trigger: auto # show top n results per article, show all results by setting to -1 # 这里的数字n表示显示每篇文章搜索到的n个结果 # -1表示显示每篇文章搜索到的全部结果(不建议) top_n_per_article: 1 ","date":"2018-05-13","objectID":"/posts/3e5e6b79.html/:2:0","tags":["Hexo","NexT主题个性化"],"title":"NexT主题个性化 - 启用搜索功能","uri":"/posts/3e5e6b79.html/"},{"categories":["NexT主题个性化"],"content":" 效果图 code-block.jpg \" code-block.jpg 打开 themes\\next\\source\\css\\_custom\\custom.styl，添加如下样式： /* 行内代码块的自定义样式 */ code { color: #d500fc; background: rgba(78, 240, 233, 0.42); margin: 2px; border: 1px solid #d6d6d6; } ","date":"2018-05-13","objectID":"/posts/efd1caf6.html/:0:0","tags":["Hexo","NexT主题个性化"],"title":"NexT主题个性化 - 修改行内代码块的样式","uri":"/posts/efd1caf6.html/"},{"categories":["NexT主题个性化"],"content":" a:link 效果图 link.jpg \" link.jpg a:hover 效果图 hover.jpg \" hover.jpg 打开 themes\\next\\source\\css\\_custom\\custom.styl，添加如下样式： /* 文章内链接文本样式 */ .post-body p a, .post-body li a { color: #0593d3; border-bottom: none; border-bottom: 1px solid #0593d3; \u0026:hover { color: #fc6423; border-bottom: none; border-bottom: 1px solid #fc6423; } } 这里选择 .post-body p a 是为了不影响文章标题和首页 阅读全文》 的样式，选择 .post-body li a 是为了对列表内的超链也有效果。 总之，我们可以随意定义这里的具体样式。 ","date":"2018-05-13","objectID":"/posts/770f091e.html/:0:0","tags":["Hexo","NexT主题个性化"],"title":"NexT主题个性化 - 修改文章内的超链样式","uri":"/posts/770f091e.html/"},{"categories":["Hexo"],"content":"Hexo的永久链接的默认格式是 :year/:month/:day/:title/，比如访问站点下某一篇文章时，其路径是 2018/04/12/xxxx/，如果我们的文章标题是中文的，那么该路径就会出现中文字符。在路径中出现了中文字符很容易引发各种问题，而且也不利于seo，因为路径包含了年月日三个层级，层级太深不利于百度蜘蛛抓取。 解决办法就是利用其它的插件来生成唯一的路径，这样就算我们的文件标题随意修改，而不会导致原本的链接失效而造成站点下存在大量的死链。 ","date":"2018-05-13","objectID":"/posts/ff4321d8.html/:0:0","tags":["Hexo"],"title":"Hexo - 修改永久链接的默认格式","uri":"/posts/ff4321d8.html/"},{"categories":["Hexo"],"content":"安装插件 在站点根目录使用 git bash 执行命令： npm install hexo-abbrlink --save ","date":"2018-05-13","objectID":"/posts/ff4321d8.html/:1:0","tags":["Hexo"],"title":"Hexo - 修改永久链接的默认格式","uri":"/posts/ff4321d8.html/"},{"categories":["Hexo"],"content":"修改站点配置文件 打开根目录下的 _config.yml 文件，修改如下配置： # permalink: :year/:month/:day/:title/ # permalink_defaults: permalink: posts/:abbrlink.html abbrlink: alg: crc32 # 算法：crc16(default) and crc32 rep: hex # 进制：dec(default) and hex 这里将页面都添加了 .html 的后缀，用来伪装成静态页面(虽说Hexo的页面本身就是静态页面)，这样可以直接从路径就知道这是个静态页面，方便seo。 接下来重新部署三连，可以看到我们的文章路径变成了 /posts/xxxxx.html，接下来就算我们将文字标题命名为中文也没问题了。 ","date":"2018-05-13","objectID":"/posts/ff4321d8.html/:2:0","tags":["Hexo"],"title":"Hexo - 修改永久链接的默认格式","uri":"/posts/ff4321d8.html/"},{"categories":["NexT主题个性化"],"content":"打开 themes\\next\\layout\\_macro\\post-collapse.swig，修改这里的超链的target： \u003ca class=\"post-title-link\" href=\"{{ url_for(post.path) }}\" itemprop=\"url\"\u003e {% if post.type === 'picture' %} {{ post.content }} {% else %} \u003cspan itemprop=\"name\"\u003e{{ post.title | default(__('post.untitled')) }}\u003c/span\u003e {% endif %} \u003c/a\u003e 接着打开 themes\\next\\layout\\_macro\\post.swig，修改这里的超链的target： \u003ca class=\"post-title-link\" href=\"{{ url_for(post.path) }}\" itemprop=\"url\"\u003e{# #}{{ post.title | default(__('post.untitled'))}}{# #}\u003c/a\u003e 在这两个超链里添加 target=\"_blank\" ，最终修改如下： target_blank.jpg \" target_blank.jpg ","date":"2018-05-13","objectID":"/posts/4d58b14d.html/:0:0","tags":["Hexo","NexT主题个性化"],"title":"NexT主题个性化 - 让所有的文章链接在新窗口打开","uri":"/posts/4d58b14d.html/"},{"categories":["NexT主题个性化"],"content":" 阅读本文前需要先填写密码 123 ","date":"2018-05-12","objectID":"/posts/15308.html/:0:0","tags":["Hexo","NexT主题个性化"],"title":"NexT主题个性化 - 对文章进行加密","uri":"/posts/15308.html/"},{"categories":["NexT主题个性化"],"content":"修改 JS 代码 打开 themes\\next\\layout\\_partials\\head.swig，在文件的开头位置找到如下代码： \u003cmeta charset=\"UTF-8\"/\u003e \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\"/\u003e \u003cmeta name=\"theme-color\" content=\"{{ theme.android_chrome_color }}\"\u003e 在上边代码的末尾添加如下代码： \u003cscript\u003e (function(){ if('{{ page.password }}'){ if (prompt('请输入文章密码') !== '{{ page.password }}'){ alert('密码错误！'); if (history.length === 1) { window.opener = null; window.open('', '_self'); window.close(); } else { history.back(); } } } })(); \u003c/script\u003e 注意：网上其他的帖子是在这里选择输入密码错误后进行回退历史的操作，代码如下： \u003cscript\u003e (function(){ if('{{ page.password }}'){ if (prompt('请输入文章密码') !== '{{ page.password }}'){ alert('密码错误！'); history.back(); } } })(); \u003c/script\u003e 我经过测试发现，这段代码有问题： 如果当前页面是新打开的窗口，其历史页面只有一个，也就是history.length === 1时，就算不输入密码或者输入错误的密码，也会在提示密码错误之后成功进入文章页面！！！ 所以我们使用改良后的JS代码。 ","date":"2018-05-12","objectID":"/posts/15308.html/:1:0","tags":["Hexo","NexT主题个性化"],"title":"NexT主题个性化 - 对文章进行加密","uri":"/posts/15308.html/"},{"categories":["NexT主题个性化"],"content":"给某篇文章设置密码 添加完脚本代码，接下来在想要加密的文章的文件头加上 password 属性就行了，如下： --- title: XXX date: XXX tags: - XXX categories: - XXX password: 123 --- 这样在打开这篇文章时只有输入了123这个密码才可以打开成功。 ","date":"2018-05-12","objectID":"/posts/15308.html/:2:0","tags":["Hexo","NexT主题个性化"],"title":"NexT主题个性化 - 对文章进行加密","uri":"/posts/15308.html/"},{"categories":["NexT主题个性化"],"content":"NexT主题集成的是4.6.2版本的fontawesome，现在已经出了更高版本的了，修改fontawesome的版本有两种方式。 ","date":"2018-05-12","objectID":"/posts/55711.html/:0:0","tags":["Hexo","NexT主题个性化"],"title":"NexT主题个性化 - 使用FontAwesome 5","uri":"/posts/55711.html/"},{"categories":["NexT主题个性化"],"content":"方式一：直接修改主题配置文件 打开主题配置文件 _config.yml，修改如下配置： # Internal version: 4.6.2 # See: http://fontawesome.io/ fontawesome: 在这里的 fontawesome: 后面直接添加上 fontawesome 的 CDN 就行了；不过不推荐这种改法，因为版本5的 fontawesome 改变了不少，直接在这里添加 fontawesome 5的 CDN 会导致原本的图标全部显示不出来。 推荐方式二的改法。 ","date":"2018-05-12","objectID":"/posts/55711.html/:1:0","tags":["Hexo","NexT主题个性化"],"title":"NexT主题个性化 - 使用FontAwesome 5","uri":"/posts/55711.html/"},{"categories":["NexT主题个性化"],"content":"方式二：修改页面头文件的模板 打开 themes\\next\\layout\\_partials\\head.swig，找到如下代码： {% if theme.vendors.fontawesome %} {% set font_awesome_uri = theme.vendors.fontawesome %} {% endif %} \u003clink href=\"{{ font_awesome_uri }}\" rel=\"stylesheet\" type=\"text/css\" /\u003e 在上边的代码后插入 fontawesome 5 的 CDN： \u003clink rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.0.13/css/all.css\" integrity=\"sha384-DNOHZ68U8hZfKXOrtjWvjxusGo9WQnrNx2sqG0tfsghAvtVlRW3tvkXWZh58N9jp\" crossorigin=\"anonymous\"\u003e 如果这里的CDN链接无效，请去官网复制CDN链接：https://fontawesome.com/get-started fontawesome-CDN \" fontawesome-CDN ","date":"2018-05-12","objectID":"/posts/55711.html/:2:0","tags":["Hexo","NexT主题个性化"],"title":"NexT主题个性化 - 使用FontAwesome 5","uri":"/posts/55711.html/"},{"categories":["NexT主题个性化"],"content":"安装 wordcount 插件 在站点根目录打开 git bash，输入： npm i --save hexo-wordcount 该插件的具体使用方法可以参考 GitHub 上的仓库：https://github.com/willin/hexo-wordcount ","date":"2018-05-12","objectID":"/posts/22195.html/:1:0","tags":["Hexo","NexT主题个性化"],"title":"NexT主题个性化 - 文章启用字数统计、阅读时长","uri":"/posts/22195.html/"},{"categories":["NexT主题个性化"],"content":"在主题配置文件启用该插件 NexT主题本身就集成了该插件，在安装了该插件后直接启用就行了。 进入主题配置文件 _config.yml，修改如下配置： # Post wordcount display settings # Dependencies: https://github.com/willin/hexo-wordcount # 文章字数展示设置 post_wordcount: # 文本显示 item_text: true # 文章字数统计 wordcount: true # 阅读时长 min2read: true # 站点总字数统计 totalcount: false # 该post_wordcount的所有设置另起一行显示 separated_meta: true ","date":"2018-05-12","objectID":"/posts/22195.html/:2:0","tags":["Hexo","NexT主题个性化"],"title":"NexT主题个性化 - 文章启用字数统计、阅读时长","uri":"/posts/22195.html/"},{"categories":["NexT主题个性化"],"content":"自定义字数计数的显示样式 启用了该插件后的显示样式也是可以自己修改的，进入 themes\\next\\layout\\post.swig，找到如下代码，这里可以修改字数统计的样式： {% if not theme.post_wordcount.separated_meta %} \u003cspan class=\"post-meta-divider\"\u003e|\u003c/span\u003e {% endif %} \u003cspan class=\"post-meta-item-icon\"\u003e \u003ci class=\"fa fa-file-word-o\"\u003e\u003c/i\u003e \u003c/span\u003e {% if theme.post_wordcount.item_text %} \u003cspan class=\"post-meta-item-text\"\u003e{{ __('post.wordcount') }}\u0026#58;\u003c/span\u003e {% endif %} \u003cspan title=\"{{ __('post.wordcount') }}\"\u003e {{ wordcount(post.content) }} \u003c/span\u003e 下边是阅读时长的代码： {% if theme.post_wordcount.min2read %} \u003cspan class=\"post-meta-item-icon\"\u003e \u003ci class=\"fa fa-clock-o\"\u003e\u003c/i\u003e \u003c/span\u003e {% if theme.post_wordcount.item_text %} \u003cspan class=\"post-meta-item-text\"\u003e{{ __('post.min2read') }} \u0026asymp;\u003c/span\u003e {% endif %} \u003cspan title=\"{{ __('post.min2read') }}\"\u003e {{ min2read(post.content) }} \u003c/span\u003e {% endif %} 改完样式后，再去 themes\\next\\languages 目录下找到你所使用的语言对应的 yml 文件，修改要显示的文本。比如我使用的语言是 zh-Hans，就修改 zh-Hans.yml里的文本： post: wordcount: 本文共计 min2read: 阅文耗时 totalcount: Site words total count ","date":"2018-05-12","objectID":"/posts/22195.html/:3:0","tags":["Hexo","NexT主题个性化"],"title":"NexT主题个性化 - 文章启用字数统计、阅读时长","uri":"/posts/22195.html/"},{"categories":["Hexo"],"content":"修改默认的post和draft的模板 通过hexo n post XXX或者hexo n draft XXX所生成的文章或草稿是根据默认的模板来生成的，我们可以自己来定制想要的模板。 在站点根目录下的 scaffolds 文件夹下，存放着 draft.md， page.md 和 post.md这三个文件夹，一般我们只需要修改draft和post这两个模板就行了。 我们可以在模板的文件头里添加自己想要的格式，如下： --- title: {{ title }} date: {{ date }} tags: categories: --- 这样使用命令生成的draft或post都会默认带有上边的文件头了。 ","date":"2018-05-10","objectID":"/posts/1369.html/:1:0","tags":["Hexo"],"title":"Hexo - 修改默认的post和draft的模板","uri":"/posts/1369.html/"},{"categories":["Hexo"],"content":"添加新的模板来生成定制的post 其实我们还可以在 scaffolds 目录下添加新的模板文件，比如 Hexo.md，其模板内容如下： --- title: {{ title }} date: {{ date }} tags: - Hexo categories: - Hexo --- 然后通过命令： hexo n hexo XXX 注意，这里的第二个 hexo 指的是我们刚刚新添加的模板文件 hexo.md 的文件名；这里的文件名和命令都是大小写不敏感的。 执行完命令会在 source/_posts 目录下生成与 hexo.md 模板相对应的文章。 ","date":"2018-05-10","objectID":"/posts/1369.html/:2:0","tags":["Hexo"],"title":"Hexo - 修改默认的post和draft的模板","uri":"/posts/1369.html/"},{"categories":["Hexo"],"content":"网上有不少办法，有的是启用配置文件中的属性，有的则是安装插件，这里只介绍最简单的一种方法。 在 source/ 目录下新建一个文件夹，比如 images；在该文件夹下存放各种图片资源，比如 test.jpg； 新建一篇文章，在文章中使用markdown的插入图片语法： ![test](/images/test.jpg) 这里使用的是绝对路径，如果使用相对路径比如images/test.jpg可能会无法访问到该图片资源。建议在博客或者配置中都使用绝对路径。 ","date":"2018-05-09","objectID":"/posts/12046.html/:0:0","tags":["Hexo"],"title":"Hexo - 如何在文章中插入图片","uri":"/posts/12046.html/"},{"categories":["Hexo搭建博客教程"],"content":" 本章讲的是如何将本地的个人项目远程部署到 GitHub Pages，涉及到GitHub的项目仓库、Git的使用，以及Hexo的远程部署等。 ","date":"2018-04-24","objectID":"/posts/1657.html/:0:0","tags":["Hexo","Pages服务"],"title":"Hexo搭建博客教程(3) - 远程部署到GitHub Pages","uri":"/posts/1657.html/"},{"categories":["Hexo搭建博客教程"],"content":"一、安装 hexo-deployer-git 插件 想要将Hexo项目部署到 GitHub上，需要先安装一个插件。在Hexo项目的根目录打开命令窗口，输入： npm install hexo-deployer-git --save\r ","date":"2018-04-24","objectID":"/posts/1657.html/:1:0","tags":["Hexo","Pages服务"],"title":"Hexo搭建博客教程(3) - 远程部署到GitHub Pages","uri":"/posts/1657.html/"},{"categories":["Hexo搭建博客教程"],"content":"二、GitHub上创建一个仓库 仓库的名字可以随便起，不过这个仓库是作为我们的博客仓库的，所以尽量将名字以 {username}.github.io 的形式来起。 比如，我的GitHub用户名是lewky，我就会把这个仓库命名为lewky.github.io。（为什么要这样起名，后面会说明） ","date":"2018-04-24","objectID":"/posts/1657.html/:2:0","tags":["Hexo","Pages服务"],"title":"Hexo搭建博客教程(3) - 远程部署到GitHub Pages","uri":"/posts/1657.html/"},{"categories":["Hexo搭建博客教程"],"content":"三、修改本地的项目配置文件 在 _config.yml 找到如下： # Deployment ## Docs: https://hexo.io/docs/deployment.html deploy: type: 把刚刚我们新建的GitHub仓库链接配置进来： # Deployment ## Docs: https://hexo.io/docs/deployment.html deploy: type: git repo: git@github.com:/{user}/{repository}.git branch: master message: 请注意，这里的仓库地址如果写成：https://github.com/{user}/{repository}.git可能会在后边的部署时无法成功，需要将https://github.com改成如下格式： git@github.com: 另外这里的branch和message可以不填，branch会默认是master分支，message会默认用下边的格式模板： Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }} ","date":"2018-04-24","objectID":"/posts/1657.html/:3:0","tags":["Hexo","Pages服务"],"title":"Hexo搭建博客教程(3) - 远程部署到GitHub Pages","uri":"/posts/1657.html/"},{"categories":["Hexo搭建博客教程"],"content":"四、SSH key的创建与配置 最关键的一步来了，我们需要生成一对密钥对，然后将公钥配置到GitHub账号上。 ","date":"2018-04-24","objectID":"/posts/1657.html/:4:0","tags":["Hexo","Pages服务"],"title":"Hexo搭建博客教程(3) - 远程部署到GitHub Pages","uri":"/posts/1657.html/"},{"categories":["Hexo搭建博客教程"],"content":"4.1 生成RSA密钥对 首先使用 Git Bash 输入： cd ~/.ssh ~ 指的是当前用户的根目录，即 C:\\Users\\{user}\\；而 .ssh 目录下一般存放着公开的SSH key文件： id_dsa.pub id_ecdsa.pub id_ed25519.pub id_rsa.pub 此外还有个 known_hosts 文件，SSH会把我们每个访问过的计算机的公钥(public key)都记录在里面。 如果在使用了 cd ~/.ssh 后能找到路径，那就把该目录下的 id_rsa.pub 文件里的内容复制到剪切板。如果找不到路径，就执行命令： ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" 该命令会生成新的SSH key，这里的参数含义： -t: type，生成的密钥类型 -b: bits，指定密钥长度，对于RSA密钥，最小要求768位，默认是2048位。DSA密钥必须恰好是1024位，一般越长越安全。 -C: comment，提供一个新注释 接着会看到如下提示： Enter file in which to save the key (/c/Users/123/.ssh/id_rsa): 这里按下回车，表示将SSH key保存到默认地址，即：C:\\Users\\{user}\\ 如果本身已经存在一个RSA私钥了，会提示你： /c/Users/123/.ssh/id_rsa already exists. Overwrite (y/n)? 这里输入 y 可以重新生成RSA密钥对；然后就会看到如下提示： Enter passphrase (empty for no passphrase): 这里按下回车，表示不设置密码；接着会再提示你输入重复密码，依然是按下回车。 Enter same passphrase again: 这时候我们的SSH key就生成好了，去 ~/.ssh 目录下将里边的 id_rsa.pub 文件里的内容复制到剪切板。 ","date":"2018-04-24","objectID":"/posts/1657.html/:4:1","tags":["Hexo","Pages服务"],"title":"Hexo搭建博客教程(3) - 远程部署到GitHub Pages","uri":"/posts/1657.html/"},{"categories":["Hexo搭建博客教程"],"content":"4.2 在 GitHub 上配置SSH key 接着登陆我们的 GitHub 账号： 进入 Settings 页面 选择 SSH and GPG keys 点击 New SSH key 填写 Title（用来给公钥起一个名字，以便和其他的公钥区分开来） 然后在 Key 里将我们刚刚复制的公钥复制进去 最后点击 Add SSH key，这时候 GitHub 会要你输入账号密码进行确认。 ","date":"2018-04-24","objectID":"/posts/1657.html/:4:2","tags":["Hexo","Pages服务"],"title":"Hexo搭建博客教程(3) - 远程部署到GitHub Pages","uri":"/posts/1657.html/"},{"categories":["Hexo搭建博客教程"],"content":"4.3 验证ssh连接 使用 Git Bash 输入： ssh -T git@github.com 接着会看到： The authenticity of host 'github.com (192.30.253.112)' can't be established. RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8. Are you sure you want to continue connecting (yes/no)? 输入 yes，会看到： Warning: Permanently added 'github.com,192.30.253.112' (RSA) to the list of known hosts. Hi lewky! You've successfully authenticated, but GitHub does not provide shell access. 这时候 github.com的公钥被保存到known_hosts文件里，如果我们再执行一次ssh -T git@github.com，就不需要输入yes了，会直接看到： Hi lewky! You've successfully authenticated, but GitHub does not provide shell access. ","date":"2018-04-24","objectID":"/posts/1657.html/:4:3","tags":["Hexo","Pages服务"],"title":"Hexo搭建博客教程(3) - 远程部署到GitHub Pages","uri":"/posts/1657.html/"},{"categories":["Hexo搭建博客教程"],"content":"4.4 部署到 GitHub Pages 输入命令： hexo d 或者 hexo g -d 后一条命令表示生成静态页面并部署到远处仓库，第一次部署会久一点，部署成功后会看到： * [new branch] HEAD -\u003e master INFO Deploy done: git 接着登陆 GitHub 并进入我们的项目仓库，可以看到已经多出了很多文件，且其 message 都是默认的格式： Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }} 接下来点击 Settings 进入该仓库的设置页面，找到 Github Pages 这一项，选择以 Master 分支作为 source，然后保存；接下来这个仓库就会被部署到 https://{username}.github.io/{仓库名}。 如果你希望直接通过 https://{username}.github.io/ 来访问你的博客，可以将仓库名改为 {username}.github.io；这样就不需要在url后边添加上仓库名来访问了。 接下来，开始享受你的个人博客吧 :) ","date":"2018-04-24","objectID":"/posts/1657.html/:4:4","tags":["Hexo","Pages服务"],"title":"Hexo搭建博客教程(3) - 远程部署到GitHub Pages","uri":"/posts/1657.html/"},{"categories":["Hexo搭建博客教程"],"content":" 本章主要讲博客的个性化，譬如站点的基本配置（语言、头像、站点图标等）、安装新的Hexo主题（NexT主题）以及主题的配置。 ","date":"2018-04-24","objectID":"/posts/38619.html/:0:0","tags":["Hexo","个性化配置"],"title":"Hexo搭建博客教程(2) - 博客的简单个性化配置","uri":"/posts/38619.html/"},{"categories":["Hexo搭建博客教程"],"content":"一、修改站点配置 打开站点配置文件 ，找到： # Site title: Hexo subtitle: description: keywords: author: John Doe language: timezone: 根据自己的需要去修改上边的配置，这些配置的注释如下： # Site # 站点标题 title: Hexo # 站点副标题 subtitle: # 站点描述 description: # 站点关键词 keywords: # 站点主人 author: John Doe # 站点语言 language: # 站点时区 timezone: ","date":"2018-04-24","objectID":"/posts/38619.html/:1:0","tags":["Hexo","个性化配置"],"title":"Hexo搭建博客教程(2) - 博客的简单个性化配置","uri":"/posts/38619.html/"},{"categories":["Hexo搭建博客教程"],"content":"1.1 language 目前 NexT 支持的语言如下： 语言 language English en 简体中文 zh-Hans Français fr-FR Português pt或者pt-BR 繁體中文 zh-hk或者zh-tw Русский язык ru Deutsch de 日本語 ja Indonesian id Korean ko ","date":"2018-04-24","objectID":"/posts/38619.html/:1:1","tags":["Hexo","个性化配置"],"title":"Hexo搭建博客教程(2) - 博客的简单个性化配置","uri":"/posts/38619.html/"},{"categories":["Hexo搭建博客教程"],"content":"1.2 timezone Hexo 默认使用电脑的时区，也可以自己配置，比如： UTC+8\r ","date":"2018-04-24","objectID":"/posts/38619.html/:1:2","tags":["Hexo","个性化配置"],"title":"Hexo搭建博客教程(2) - 博客的简单个性化配置","uri":"/posts/38619.html/"},{"categories":["Hexo搭建博客教程"],"content":"二、安装新主题 Hexo有很多大佬开发的主题，很多人使用的是NexT主题，该主题也确实挺简洁好看的，新版本的NexT主题还可以选择四个主题。 那么怎么安装新的Hexo主题呢？ 在我们的Hexo项目路径下，可以看到有个 themes 文件夹，这个文件夹就是用于存放主题文件的。 ","date":"2018-04-24","objectID":"/posts/38619.html/:2:0","tags":["Hexo","个性化配置"],"title":"Hexo搭建博客教程(2) - 博客的简单个性化配置","uri":"/posts/38619.html/"},{"categories":["Hexo搭建博客教程"],"content":"2.1 下载 NexT 主题 首先在Hexo项目的路径下打开命令窗口，如果你没有配置好Git的环境变量，请使用Git Bash。 git clone https://github.com/iissnan/hexo-theme-NexT themes/NexT 注意，当前路径是你的Hexo项目根目录，使用上边的命令才能正确地将 NexT 主题clone到themes文件夹下的NexT文件夹里。 接下来你会看到 themes 下多了个 NexT 文件夹，点进去你会看到个.git文件夹，将该文件夹删掉，否则到时候你无法将整个完整的Hexo项目push到GitHub上。 ","date":"2018-04-24","objectID":"/posts/38619.html/:2:1","tags":["Hexo","个性化配置"],"title":"Hexo搭建博客教程(2) - 博客的简单个性化配置","uri":"/posts/38619.html/"},{"categories":["Hexo搭建博客教程"],"content":"2.2 启用 NexT 主题 在Hexo项目中，有两个重要的配置文件 _config.yml；这两个配置文件一个在项目根目录下，一个在主题目录下。 前者是站点配置文件，后者是主题配置文件，顾名思义，一个是Hexo项目的配置选项，一个是主题文件的配置选项。 打开站点配置文件，用Windows自带的笔记本是无法打开该文件的，请使用其他的编辑器来打开，常见的编辑器有Notepad++，UltraEdit，EditPlus等。 在站点配置文件中，找到： # Extensions ## Plugins: https://hexo.io/plugins/ ## Themes: https://hexo.io/themes/ theme: landscape 默认的博客主题就是这个，我们将其修改为NexT；这里的主题是指在 themes 文件夹下的对应主题的文件夹名字。 **注意，在配置文件中所有的属性的值，都必须和前边的 : 之间留一个空格。**比如下边的写法就是错误的，不加上空格的话会出错。 theme:landscape ","date":"2018-04-24","objectID":"/posts/38619.html/:2:2","tags":["Hexo","个性化配置"],"title":"Hexo搭建博客教程(2) - 博客的简单个性化配置","uri":"/posts/38619.html/"},{"categories":["Hexo搭建博客教程"],"content":"2.3 选择对应主题的外观 Scheme 打开主题配置文件，找到下边的选项： # --------------------------------------------------------------- # Scheme Settings # --------------------------------------------------------------- # Schemes scheme: Muse #scheme: Mist #scheme: Pisces #scheme: Gemini 默认会使用Muse作为NexT主题的外观，通过将某个scheme前边的#去掉来启动某个外观，如下： # --------------------------------------------------------------- # Scheme Settings # --------------------------------------------------------------- # Schemes #scheme: Muse #scheme: Mist #scheme: Pisces scheme: Gemini ","date":"2018-04-24","objectID":"/posts/38619.html/:2:3","tags":["Hexo","个性化配置"],"title":"Hexo搭建博客教程(2) - 博客的简单个性化配置","uri":"/posts/38619.html/"},{"categories":["Hexo搭建博客教程"],"content":"2.4 验证新主题 依然是老操作——启动调试模式服务器： hexo s --debug 启动成功后，使用浏览器访问http://localhost:4000/，看看博客能否访问成功。 ","date":"2018-04-24","objectID":"/posts/38619.html/:2:4","tags":["Hexo","个性化配置"],"title":"Hexo搭建博客教程(2) - 博客的简单个性化配置","uri":"/posts/38619.html/"},{"categories":["Hexo搭建博客教程"],"content":"三、修改 NexT 主题配置 主题配置文件 _config.yml 位于 themes\\NexT 之下。 ","date":"2018-04-24","objectID":"/posts/38619.html/:3:0","tags":["Hexo","个性化配置"],"title":"Hexo搭建博客教程(2) - 博客的简单个性化配置","uri":"/posts/38619.html/"},{"categories":["Hexo搭建博客教程"],"content":"3.1 头像设置 打开主题配置文件，找到如下： # 侧边栏头像 # Sidebar Avatar # in theme directory(source/images): /images/avatar.gif # in site directory(source/uploads): /uploads/avatar.gif # 头像的路径可以放在主题对应文件夹的source里，也可以放在站点根目录的source里，建议放在站点路径上 #avatar: /images/avatar.gif 将avatar前边的#去掉，接着配置图片的路径即可。 ","date":"2018-04-24","objectID":"/posts/38619.html/:3:1","tags":["Hexo","个性化配置"],"title":"Hexo搭建博客教程(2) - 博客的简单个性化配置","uri":"/posts/38619.html/"},{"categories":["Hexo搭建博客教程"],"content":"3.2 网站图标 打开主题配置文件，找到如下： # 将你的网站图标放到`{站点根目录}/source/` (推荐）或者`hexo-site/themes/NexT/source/images/`目录下 # 默认的NexT主题的网站图标放在`{站点根目录}/themes/NexT/source/images/`目录下 # 如果你想将自己的网站图标放到`{站点根目录}/source/`根目录下，必须将`/images`从路径中去掉 # 如果你将网站图标放到了`{站点根目录}/source/images`路径下，需要令网站图标的名字和`{站点根目录}/themes/NexT/source/images/`路径下的网站图标不同，否则网站图标会使用后者的同名图标 favicon: small: /images/favicon-16x16-NexT.png medium: /images/favicon-32x32-NexT.png apple_touch_icon: /images/apple-touch-icon-NexT.png safari_pinned_tab: /images/logo.svg #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xml 这里需要注意的是，网站图标一般是.ico或者.gif的类型，而且图标的大小一般只有几k而已，可以使用下边的网站制作个人的网站图标，建议先将原本的图标弄成正方形的。 在线制作ico图标 ","date":"2018-04-24","objectID":"/posts/38619.html/:3:2","tags":["Hexo","个性化配置"],"title":"Hexo搭建博客教程(2) - 博客的简单个性化配置","uri":"/posts/38619.html/"},{"categories":["Hexo搭建博客教程"],"content":"3.3 菜单设置 打开主题配置文件，找到如下： # 如果该站点是运行在子目录之下（比如：domain.tld/blog；这里的blog就是指我们的博客，前边的是上一级的域名），需要将路径前的斜杠去掉（/archives -\u003e archives；即是将原本的绝对路径改成了相对路径）。 # 用法：`Key：/link/ || 菜单图标` # Key就是菜单名，如果对该菜单名进行了国际化，即将其翻译放到对应的languages文件夹中，将会根据你设置的语言进行加载对应的菜单名翻译；如果没有设置翻译，则会使用这里的Key作为菜单名。这里的Key是大小写敏感的。 # 在`||`分隔符之前的值是该菜单对应的路径 # 在`||`分隔符之后的值是FontAwesome的图标（不懂的请百度什么是FontAwesome以及其用法），如果不指定图标，将会自动使用question这个图标。 menu: home: / || home #about: /about/ || user #tags: /tags/ || tags #categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat 使用方法很简单，依然是将需要展示的菜单的前边的#去掉就行，更加具体的操作信息我已经在上边的注释中给出了。 ","date":"2018-04-24","objectID":"/posts/38619.html/:3:3","tags":["Hexo","个性化配置"],"title":"Hexo搭建博客教程(2) - 博客的简单个性化配置","uri":"/posts/38619.html/"},{"categories":["Hexo搭建博客教程"],"content":"3.4 标签分类 首先我们需要新建页面，在站点根目录打开命令窗口，分别输入命令： hexo n page \"categories\" hexo n page \"tags\" hexo n page \"about\" 接着你会发现在根目录的 source 目录下多出了上边的三个文件夹，里面各自有一个 index.md 文件。如果之前我们将menu里的categories，tags，about三个菜单解开了封印，那么在创建好这三个页面后就可以成功访问到，否则会报404请求错误。 ","date":"2018-04-24","objectID":"/posts/38619.html/:3:4","tags":["Hexo","个性化配置"],"title":"Hexo搭建博客教程(2) - 博客的简单个性化配置","uri":"/posts/38619.html/"},{"categories":["Hexo搭建博客教程"],"content":"3.5 社交链接 # 如果不指定图标，会默认使用globe图标 #social: #GitHub: https://github.com/yourname || github #E-Mail: mailto:yourname@gmail.com || envelope #Google: https://plus.google.com/yourname || google #Twitter: https://twitter.com/yourname || twitter #FB Page: https://www.facebook.com/yourname || facebook #VK Group: https://vk.com/yourname || vk #StackOverflow: https://stackoverflow.com/yourname || stack-overflow #YouTube: https://youtube.com/yourname || youtube #Instagram: https://instagram.com/yourname || instagram #Skype: skype:yourname?call|chat || skype 老规矩，去掉#注释就可以启动。 ","date":"2018-04-24","objectID":"/posts/38619.html/:3:5","tags":["Hexo","个性化配置"],"title":"Hexo搭建博客教程(2) - 博客的简单个性化配置","uri":"/posts/38619.html/"},{"categories":["Hexo搭建博客教程"],"content":" 前言 搭建个人博客一般有两种选择，一个是使用WordPress，但是需要将博客搭建在服务器上，不过搭建好后写文章方便，适合没有程序基础的人使用。另一个是使用Hexo，相对简洁高效，不需要服务器，既可以部署在本地，也可以将博客部署到GitHub Pages上，支持Markdown语法，缺点是需要有Git基础，写文章比WordPress麻烦点。 初次使用Hexo来搭建个人博客，确实比较手忙脚乱，这里记录一下流程，希望对大家能有所帮助。 （注：本文是只针对Windows平台的搭建教程） 有兴趣的可以戳下这里看看我的个人博客。 How to play 本教程一共分为3章： 第一章是安装环境和本地搭建 第二章是博客的个性化配置 第三章是将博客部署到 GitHub Pages 请根据自身需要选择章节，以节省时间。 ","date":"2018-04-24","objectID":"/posts/22143.html/:0:0","tags":["Hexo","简单入门"],"title":"Hexo搭建博客教程(1) - 安装环境与本地搭建","uri":"/posts/22143.html/"},{"categories":["Hexo搭建博客教程"],"content":"一、安装环境 安装Node.js 安装Git 安装Hexo ","date":"2018-04-24","objectID":"/posts/22143.html/:1:0","tags":["Hexo","简单入门"],"title":"Hexo搭建博客教程(1) - 安装环境与本地搭建","uri":"/posts/22143.html/"},{"categories":["Hexo搭建博客教程"],"content":"1.1 安装Node.js Hexo是一个基于Node.js的快速、简洁且高效的静态站点生成框架，想要安装Hexo，需要先安装Node.js，官网的安装包有两种，一种是安装程序.msi文件，一种是.zip压缩包，这里选择.msi文件，安装后会自动配置好环境变量。 下载链接 ","date":"2018-04-24","objectID":"/posts/22143.html/:1:1","tags":["Hexo","简单入门"],"title":"Hexo搭建博客教程(1) - 安装环境与本地搭建","uri":"/posts/22143.html/"},{"categories":["Hexo搭建博客教程"],"content":"1.2 安装Git Git就不多说了，作为开发者或多或少都会接触过吧，直接前往官网下载安装包即可。操作教程网上也是一堆，这里就不赘述了。 下载链接 如果Git和Node.js的环境变量都配置好了，可以通过在cmd中确认安装结果。 git --version node -v ","date":"2018-04-24","objectID":"/posts/22143.html/:1:2","tags":["Hexo","简单入门"],"title":"Hexo搭建博客教程(1) - 安装环境与本地搭建","uri":"/posts/22143.html/"},{"categories":["Hexo搭建博客教程"],"content":"1.3 安装Hexo 安装好Node.js，就可以使用npm来安装Hexo npm install -g hexo-cli 安装完毕后，可以通过hexo version来确认是否安装成功。 ","date":"2018-04-24","objectID":"/posts/22143.html/:1:3","tags":["Hexo","简单入门"],"title":"Hexo搭建博客教程(1) - 安装环境与本地搭建","uri":"/posts/22143.html/"},{"categories":["Hexo搭建博客教程"],"content":"二、开始搭建个人博客 千里之行，始于足下，在安装好所有的环境之后，我们终于可以开始搭建博客的第一步了。 ","date":"2018-04-24","objectID":"/posts/22143.html/:2:0","tags":["Hexo","简单入门"],"title":"Hexo搭建博客教程(1) - 安装环境与本地搭建","uri":"/posts/22143.html/"},{"categories":["Hexo搭建博客教程"],"content":"2.1 初始化Hexo项目 首先是选择一个文件夹，用来给我们我们的个人博客的存放各种文件。接着进入该文件夹的路径，打开cmd命令窗口，这里有两种打开方式： 按住Shift，同时点击鼠标右键，选择在此处打开命令窗口。 在上方的地址栏里输入cmd，接着回车即可快速打开命令窗口。 当然，你也可以直接Win+R然后输入cmd来打开命令窗口，不过需要再通过cd命令将路径切换到你指定的文件夹。 接着输入指令来初始化你的博客 hexo init 初始化成功后，你会看到 Start blogging with Hexo! ","date":"2018-04-24","objectID":"/posts/22143.html/:2:1","tags":["Hexo","简单入门"],"title":"Hexo搭建博客教程(1) - 安装环境与本地搭建","uri":"/posts/22143.html/"},{"categories":["Hexo搭建博客教程"],"content":"2.2 生成静态页面文件 接下来，执行命令 hexo g 该命令用来生成静态页面文件到public目录，Hexo会将 source 文件夹中除 posts 文件夹之外，以下划线_开头命名的文件或文件夹、以及隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件夹会被拷贝过去。 最后，我们只要启动Hexo服务器就行了。 ","date":"2018-04-24","objectID":"/posts/22143.html/:2:2","tags":["Hexo","简单入门"],"title":"Hexo搭建博客教程(1) - 安装环境与本地搭建","uri":"/posts/22143.html/"},{"categories":["Hexo搭建博客教程"],"content":"2.3 本地启动Hexo服务器 hexo s --debug Hexo启动服务器的速度非常快，很快你就可以看到 Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 恭喜你，你的个人博客已经搭建成功了，接下来只要在浏览器输入http://localhost:4000/就可以在本地访问你的博客了。 这里使用hexo s也可以启动服务器，只不过加上--debug 参数，如果运行中出错可以看到错误信息。 ","date":"2018-04-24","objectID":"/posts/22143.html/:2:3","tags":["Hexo","简单入门"],"title":"Hexo搭建博客教程(1) - 安装环境与本地搭建","uri":"/posts/22143.html/"},{"categories":["Hexo搭建博客教程"],"content":"2.4 关闭Hexo服务器 要想关闭服务器，只需要在命令窗口按下Ctrl+C就可以了，这个组合键不仅仅用于关闭服务器，事实上你在cmd窗口中任何执行中的命令都可以用这个组合键来结束命令，只要连按两次该组合键就可以连输入Y或者N都不用。 ","date":"2018-04-24","objectID":"/posts/22143.html/:2:4","tags":["Hexo","简单入门"],"title":"Hexo搭建博客教程(1) - 安装环境与本地搭建","uri":"/posts/22143.html/"},{"categories":["Hexo搭建博客教程"],"content":"三、常用的命令 hexo new \"postName\" #新建文章 hexo new page \"pageName\" # 新建页面 hexo generate # 生成静态页面至public目录 hexo server # 启动服务器(默认端口4000，'ctrl+c'关闭server) hexo deploy # 项目部署 hexo help # 查看帮助 hexo version # 查看Hexo的版本 hexo clean # 清除Hexo的缓存 上边的一些命令可以使用简写 hexo n hexo g hexo d hexo s ","date":"2018-04-24","objectID":"/posts/22143.html/:3:0","tags":["Hexo","简单入门"],"title":"Hexo搭建博客教程(1) - 安装环境与本地搭建","uri":"/posts/22143.html/"},{"categories":["Hexo搭建博客教程"],"content":"3.1 本地调试三连 hexo clean hexo g hexo s --debug ","date":"2018-04-24","objectID":"/posts/22143.html/:3:1","tags":["Hexo","简单入门"],"title":"Hexo搭建博客教程(1) - 安装环境与本地搭建","uri":"/posts/22143.html/"},{"categories":["Hexo搭建博客教程"],"content":"3.2 远程部署三连 hexo clean hexo g hexo d 注：在使用部署命令时，需要先用npm安装 hexo-deployer-git 插件： npm install hexo-deployer-git --save\r ","date":"2018-04-24","objectID":"/posts/22143.html/:3:2","tags":["Hexo","简单入门"],"title":"Hexo搭建博客教程(1) - 安装环境与本地搭建","uri":"/posts/22143.html/"},{"categories":["Hexo搭建博客教程"],"content":"四、撰写第一篇博文 Hexo撰写博文也不难，分为 post 和 draft 两种，其中 post 存放在 source/_posts 目录下，draft 存放在 source/_drafts 目录下。 post 和 draft 的区别在于前者会被发布到博客，而后者不会被发布。 ","date":"2018-04-24","objectID":"/posts/22143.html/:4:0","tags":["Hexo","简单入门"],"title":"Hexo搭建博客教程(1) - 安装环境与本地搭建","uri":"/posts/22143.html/"},{"categories":["Hexo搭建博客教程"],"content":"4.1 第一篇文章 hexo n post \"my-first-post\" Hexo会自动在 source/_posts 目录下新建一个名为 my-first-post 的 .md 文件；打开该文件，可以看到： --- title: my-first-post date: 2018-04-21 23:11:30 tags: --- 这是 post 模板自动生成的 YAML 文件头，title 是这篇 post 的标题，可以将其改为 My First Post；date 是创建的日期；tags 是该 post 的标签，可以添加自定义的标签： --- title: My First Post date: 2018-04-21 23:11:30 tags: - demo - first-post --- 接着再进行本地调试三连，就可以看到刚刚写好的博文了。 hexo clean hexo g hexo s --debug ","date":"2018-04-24","objectID":"/posts/22143.html/:4:1","tags":["Hexo","简单入门"],"title":"Hexo搭建博客教程(1) - 安装环境与本地搭建","uri":"/posts/22143.html/"},{"categories":["Hexo搭建博客教程"],"content":"4.1 第一篇草稿 创建命令和前边类似： hexo n draft \"my-first-draft\" 另外草稿的头文件是没有日期的： --- title: my-first-draft tags: --- 草稿文件是不会被 hexo g 命令生成到public目录下的。 ","date":"2018-04-24","objectID":"/posts/22143.html/:4:2","tags":["Hexo","简单入门"],"title":"Hexo搭建博客教程(1) - 安装环境与本地搭建","uri":"/posts/22143.html/"},{"categories":null,"content":"Running Time \r ","date":"2018-04-24","objectID":"/about/:0:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"博主相关 ","date":"2018-04-24","objectID":"/about/:1:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"近况 17年本科毕业，目前在珠海从事Java开发，码农界萌新 (⌒▽⌒) ","date":"2018-04-24","objectID":"/about/:1:1","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"技能 Java, JavaWeb （性感码农，在线搬砖） ","date":"2018-04-24","objectID":"/about/:1:2","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"联系 email: 1019175915@qq.com github@lewky csdn@lewky_liu cnblogs@yulinlewis ","date":"2018-04-24","objectID":"/about/:1:3","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"随笔 → 戳我查看随笔 ← ","date":"2018-04-24","objectID":"/about/:1:4","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"站点相关 ","date":"2018-04-24","objectID":"/about/:2:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"站点及主题版本 hugo: v0.74.2-48565DE6 windows/amd64 BuildDate: 2020-07-17T17:22:50Z\rLoveIt: v0.2.10\r ","date":"2018-04-24","objectID":"/about/:2:1","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"建站日志 → 戳我查看建站日志 ← ","date":"2018-04-24","objectID":"/about/:2:2","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"友情链接 暂时没有友链哟 (ﾉ*･ω･)ﾉ～ 想添加友链可以在下方留言~ \r/* 站点运行时间 */\rfunction show_date_time(){\rwindow.setTimeout(\"show_date_time()\", 1000);\r/* 请修改这里的起始时间 */\rBirthDay=new Date(\"04/24/2018 15:00:00\");\rtoday=new Date();\rtimeold=(today.getTime()-BirthDay.getTime());\rsectimeold=timeold/1000\rsecondsold=Math.floor(sectimeold);\rmsPerDay=24*60*60*1000\re_daysold=timeold/msPerDay\rdaysold=Math.floor(e_daysold);\re_hrsold=(e_daysold-daysold)*24;\rhrsold=setzero(Math.floor(e_hrsold));\re_minsold=(e_hrsold-hrsold)*60;\rminsold=setzero(Math.floor((e_hrsold-hrsold)*60));\rseconds=setzero(Math.floor((e_minsold-minsold)*60));\rdocument.getElementById('days').innerHTML=\"本站已运行\"+daysold+\"天\"+hrsold+\"小时\"+minsold+\"分\"+seconds+\"秒\";\r}\rfunction setzero(i){\rif (i ","date":"2018-04-24","objectID":"/about/:3:0","tags":null,"title":"关于","uri":"/about/"},{"categories":["随笔"],"content":"随笔 就是随手写写的乱七八糟的玩意…… ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:0:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2019-07-01 哈哈，一发十连出了银老板和赫默，爽到！！！ ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:1:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2019-06-08 这周的JOJO简直爽到！尤其是最后的银镇登场bgm，真的炸裂！ ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:2:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2019-05-15 又要开打贸易战了……互联网的又一波失业寒潮。 ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:3:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2019-04-24 好久没更新博客了，这阵子确实忙了很多，人也颓唐了不少，是时候改变了，不能继续丧下去了…… 另外—— 建站一周年纪念！！ ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:4:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2019-04-23 已经连续三天在食堂拿到半价的绿盘子了，可能预示着这阵子会运势上升？晚上买了半个榴莲吃，花了68块大洋，一斤18.8，虽然贵了点，但美味程度确实不错，好吃！ ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:5:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2019-03-07 今天是个神奇的日子。 早上煮的鸡蛋是双黄蛋； 上午同事报喜生了龙凤胎； 中午食堂破天荒给了一对鸡翅； 怎么形容今天呢？简直是JOJO的奇妙冒险级别的日子~ ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:6:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2019-02-19 猿宵节 猿宵节：通常指程序猿通宵写代码的节日 ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:7:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2019-02-18 建站300天纪念！！ ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:8:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2019-02-17 下午看到附近的狗子躺在地上不停往空中踢腿，跟踩单车一样，百度了下也找不到类似的状况，emmm，这狗不会是在瘦腿吧…… ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:9:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2019-02-14 今天是情人节，公司刚好在这天进行开工拜神活动，收到个开工红包，顺带吃了波烤乳猪和烧鸡。这烤乳猪比去年的好吃不少！不沾酱料吃最好，咸咸的脆脆的，沾了白糖后反而很腻。 ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:10:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2019-01-27 时间过得真快，转眼就要回家过春节了，新的一年里也快过去头个月了。 发现自己是真的越发懒散怠惰了，想想去年的这个时候，还心怀高远，精神焕发，再看看如今，去年定下的目标是越发地遥不可及了。 应该怎么有效地调节情绪呢，总觉得自己是个有自知之明却没有自制之力的废材呀。。 ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:11:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2019-01-08 第一次吃牛奶草莓，闻起来确实很香，不过吃起来倒是和普通草莓差不多。 ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:12:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2018-12-19 不知道写点啥，最近一直状态不好，记录下之前写的几句诗歌吧~ 纵心猿，驰意马。 秋风秋雨织秋意，春花春水鉴春光。 ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:13:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2018-11-14 双十一买的戴尔和三只松鼠终于都到了，开心！！ ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:14:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2018-11-04 这个周末看了整整两天的《乌龙闯情关》，还是以前的电视剧好看。剧中的刘病已、霍水仙、许平君、大牛、鸠摩空都让人印象深刻，也知道了故剑情深的典故。 现在各种快餐文化，人心浮躁，还是以前的影视、小说作品让人回味无穷，我不是个怀旧的人，却对过去的一些回忆很有感怀。这些都是宝贵的精神食粮，可能是一首歌，也可能是荧幕中、笔墨下的一个人物，每每带给我鼓舞与勇气。 我也要努力，冲鸭！ ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:15:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2018-10-24 今天是程序员节，在这个日子里，我终于将自己定制的hexo主题正式起名为Beep了~ 1024节日快乐~ ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:16:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2018-10-18 又看了一遍JOJO第四部的boss战，真是百看不厌，爱死JOJO了！ ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:17:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2018-10-14 每周都是等待JOJO新一集的煎熬和畅享JOJO新一集的舒爽…… ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:18:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2018-10-08 《逍遥游》完结了，又追完了一本小说，现在能看的书真的不多了。。 ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:19:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2018-10-07 好久没更新随笔了，这阵子人懒散了好多，肚子也多了几圈，国庆回到家里人人都说我胖了，确实，上班一年我竟然重了二十斤左右。要知道当初大一那会还不到一百斤，瘦的跟猴子似的，现在却已经一百二十多了。 马上就要新的一年了，距离三十大关又进了一步，我时间不多啦，得加把劲践行自己的目标，顺便把肥给减了。。 ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:20:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2018-09-18 今天竟然被老大叫进去开了波会，会议中对我上半年的表现和绩效表示肯定，加薪之余望我能再接再厉。哈哈，还是挺开心的，感觉自己一直以来的努力没有白费，果然单身能促进生产力啊_(:з」∠)_ ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:21:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2018-09-12 今天早上看到唐家三少妻子去世的消息，有些震惊，心情不知道怎么形容，难受又复杂。高中最早接触的网络小说之一就是三少写的光之子，里边男主女主就是化用的他们夫妻两人的名字，到现在还记忆深刻。 曾经受到三少的影响，很想去写书，只是时间无情，人很脆弱。。只能说句，三少，节哀。 ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:22:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2018-09-01 妈蛋啊！！昨晚买的榴莲千层蛋糕，本来是作为第二天早餐的，结果起床一看整个蛋糕都化水了，还发出腐烂的臭味！！我的心在滴血，八块钱的蛋糕就这么没了…… ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:23:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2018-08-27 卧槽，下了一天一夜的雨，第二天下班收衣服时发现上衣有半边被雨水打湿而发霉了…… ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:24:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2018-08-27 加班到九点半下班，赶上下大雨，然后雨伞又开始漏雨，好气哦。 都买了三把雨伞了，怎么还是漏雨的货！ 伞外下大雨，伞内下小雨。 ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:25:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2018-08-17 今天是七夕，emmm 单身汪岁 ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:26:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2018-08-13 自律真的很重要，我要培养自己的自律能力，毕竟已经是叔叔辈了…… ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:27:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2018-08-06 今晚一口气看了《刺客伍六七》这部国产动画，简直爽到！上一部让我看得这么酣畅淋漓的国产动画是《凸变英雄》，之前就经常瞥见刺客伍六七的消息，只是一直都听不起兴趣去看，直到今天无意间点开了第一集，之后就一发不可收拾了，还好没错过。 ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:28:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2018-08-02 建站100天！！！ ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:29:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2018-07-29 趁着这个月还没结束，赶紧开始撸品优购，还是敲完整的一个项目爽快~ ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:30:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2018-07-28 今天去看了《西虹市首富》，挺有趣的，沈腾还是那么好玩，开心麻花街的作品还是让人看得好开心。当初那个春晚小品《扶不扶》真的惊为天人，已经看过十几遍了，O(∩_∩)O哈哈~ ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:31:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2018-07-15 最近发现吃了香蕉后就会胃酸过多，也就是俗称的烧心。百度了下： 香蕉性寒，脾胃虚寒、便溏腹泻者不能多食、生食，胃酸过的多者也不要吃香蕉，香蕉会增加胃酸分泌。所以最好不要空腹吃香蕉。 明明以前吃香蕉都没什么事情，而且还是特地在饭后吃的，看来身体是真的越来越差了，要多锻炼才行。 ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:32:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2018-06-13 喝了这么多年的牛奶才尴尬地发现，原来我的肠胃会对牛奶过敏，一喝牛奶就会拉肚子，以前一直以为是其他原因，没想到是对牛奶过敏，看来以后只能喝酸奶了…… ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:33:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["随笔"],"content":"2018-04-24 在CSDN也写了一年的博客了，现在终于有了专属的个人博客了，用来记录自己平日里的感悟和积累~ ","date":"2018-04-24","objectID":"/posts/d65a1577.html/:34:0","tags":["随笔","生活"],"title":"随笔","uri":"/posts/d65a1577.html/"},{"categories":["建站日志"],"content":"Siting Log o(*￣▽￣*)ブ 持续更新中 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:0:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2020-10-14 修复LoveIt主题的部分bug，更改了部分样式，主要包括： 添加背景图片轮播 归档、分类页面添加了数量统计 修改了h2的样式 缩小目录的字体 修改了引用块样式 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:1:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2020-10-09 开始将博客从Hexo迁移到Hugo，决定使用LoveIt主题，并正式将博客部署到了Pages上。 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:2:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-12-19 最近发现打开页面略慢略卡，发现是jquery-backstretch的cdn加载不了，原本官网使用的cdn是cloudflare的，现在改成了另一个cdn地址。 于是将jquery-backstretch的cdn修改了官网上最新的，总算变快了。 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:3:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-11-16 将鼠标点击产生的文字设为不可选定 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:4:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-11-10 解决在适配手机屏幕时，页面右上角的GitHub彩带被覆盖掉的问题。 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:5:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-09-18 添加了图片懒加载插件hexo-lazyload-image 出于强迫症，还是关闭了不蒜子的统计功能，目的是为了解决下边的问题二。 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:6:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-08-21 最近发现了两个问题： 如果文章不写小标题，是不会生成文章目录的，如果启用了leancloud的阅读计数功能，这时候这篇文章的阅读页面的侧边栏就会失去affix.js的固定定位效果；(该bug在火狐浏览器下偶尔会触发，在360浏览器下百分百触发) 如果启用了不蒜子计数，在360浏览器下如果滚动页面时，侧边栏的底部无法和正文模块的底部持平，侧边栏底部会比正文模块的短一些。该问题在火狐浏览器下不存在。 解决方案： 问题一需要给每篇文章都起至少一个小标题，这样就会自动生成文章目录，也就不存在这个问题了。 也可以选择关闭leancloud的阅读计数功能，重新生成静态页面就行了。 问题二对于强迫症来说很难受，要么关闭不蒜子计数，要么不使用360浏览器。 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:7:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-08-18 修改了hexo-neat的压缩选项，优化页面的加载 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:8:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-08-17 添加了新的b站头像挂件 添加头像挂件自动刷新功能 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:9:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-08-14 去掉了文本首行缩进，首行缩进有个问题：当一个段落内存在换行时，比如使用\u003cbr\u003e，会导致换行后无法缩进，不太好看；找了好久也没找到解决的方法，只能取消文本的首行缩进了。 如果需要首行缩进还是自己手动添加\u0026emsp;\u0026emsp;(全角空格，即对应两个中文空格)…… ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:10:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-07-30 修改categories page的样式 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:11:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-07-26 改善文章目录的换行问题 添加文章不在首页显示的功能：在文件头里添加not_show: true即可启用 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:12:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-07-21 添加了404页面 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:13:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-07-19 修改代码块diff样式 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:14:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-07-10 修改文本标题样式 文本首行缩进两个字符 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:15:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-07-07 添加网页标题监听事件 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:16:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-06-30 代码块添加复制按钮 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:17:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-06-25 修改about页面 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:18:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-06-20 使用 hexo-neat 压缩博文插件，优化博客静态资源 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:19:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-06-16 添加 Font Awesome 4.6.2的CDN，支持使用font awesome4或5 友情链接里添加恶搞页面 关于页面添加站点运行时间 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:20:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-06-16 修改阅读全文按钮样式 页脚爱心图形动画 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:21:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-06-16 修改站点标题样式 修改页脚样式 添加站点背景图片轮播 文章摘要添加标签 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:22:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-06-14 修改文章标签样式 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:23:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-06-12 使用 sitemap 和 baidusitemap ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:24:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-06-10 改用来必力作为评论系统 修改鼠标指针 修改引用块样式 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:25:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-06-07 添加友链并修改其样式 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:26:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-06-06 启用 Gitment ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:27:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-06-05 开启文章目录显示功能，替换掉显示错误的FontAwesome图标 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:28:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-06-04 CDN有时候加载比较慢，所以去掉原本引入的 Font Awesome 4 和 Font Awesome Free CDN，直接将下载好的 Font Awesome 5 解压复制到 lib 目录下 这里吐槽一下，由于 Font Awesome 从版本4升级到5修改了很多图标的名称，所以我花了一个多小时的时间去一个个替换这些改动的图标，累死… ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:29:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-06-03 添加头像旋转 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:30:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-06-01 去掉脚注超链的底部线条 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:31:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-05-31 添加 custom.js 文件 添加鼠标点击文字特效 添加头像挂件点击事件 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:32:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-05-30 设置文章摘要里的图片的最大宽度 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:33:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-05-27 缩小文章摘要里标题和正文的间距 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:34:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-05-25 修改预格式代码块(用tab键插入的代码块)的样式 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:35:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-05-17 重新修改了头像挂件样式 修改站点标题样式 修改菜单栏样式 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:36:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-05-16 将头部彩带图片保存到本地，避免因无法通过访问该图片(被墙)而显示不出来 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:37:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-05-14 修改头像样式并添加了头像挂件(可耻地偷了波b站的头像挂件) ( ゜- ゜)つロ 重修修改了加密文章的js代码，并将文章超链的打开方式复原 (눈_눈) ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:38:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-05-13 修改文章超链的打开方式，添加文章置顶功能 修改字体大小，关闭文章目录显示序号功能 添加 by-nc-sa 许可协议，回到顶部按钮显示百分比 修改文章内的超链样式、行内代码块的样式、回到顶部按钮样式 启用搜索功能、顶部加载条 去掉图片边框 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:39:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-05-12 文章启用字数统计、阅读时长，修改其显示的样式 使用 Font Awesome Free CDN ( upgrade from version 4 to 5 ) 添加文章加密功能 指定 Markdown 的解析器 修改 Hexo 永久链接的默认格式 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:40:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-05-11 页面右上角添加 Fork me on GitHub ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:41:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-05-09 修改 scaffolds 目录下的 post/draft.md 模板，并添加自定义的模板文件 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:42:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-05-07 首页文章显示预览，添加字数统计和阅读时长 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:43:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-05-01 添加建站日志 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:44:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-04-30 启用 tags 和 categories 菜单 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:45:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["建站日志"],"content":"2018-04-24 使用 Hexo 搭建个人博客 ","date":"2018-04-24","objectID":"/posts/e62c38c45.html/:46:0","tags":["建站日志"],"title":"建站日志","uri":"/posts/e62c38c45.html/"},{"categories":["Eclipse"],"content":"情景 有时候我们想改变web项目的web module version，比如说原本是2.4版本，我们想改成3.0版本，通过右键项目名 -\u003e Properties -\u003e Project Facets，选中Dynamic Web Module后边的版本，将2.4改成3.0 这时候会报错误：Cannot change version of project facet Dynamic Web Module to 3.0. 而且这时候改动web.xml的文件头从2.4改成3.0版本的文件头也会报错。 ","date":"2018-04-03","objectID":"/posts/4e16194f.html/:1:0","tags":["IDE工具","Eclipse"],"title":"Eclipse - 如何修改web项目的web module version","uri":"/posts/4e16194f.html/"},{"categories":["Eclipse"],"content":"解决办法 1、这时候我们需要找到该项目的目录，进入.setting文件夹，打开org.eclipse.wst.common.project.facet.core.xml 2、我们可以发现在这个xml文件中，有这样一个标签： \u003cinstalled facet=\"jst.web\" version=\"2.4\"/\u003e 3、将这里的version改成你想要的版本，比如改成3.0 4、保存该文件的改动，接着刷新Eclipse中的该项目(左键选中项目名，按F5刷新项目) 5、接着再去Properties -\u003e Project Facets ， 将Dynamic Web Module改为3.0；然后将web.xml的文件头改为对应3.0版本的文件头；此时会发现可以修改成功而不会报错。 ","date":"2018-04-03","objectID":"/posts/4e16194f.html/:2:0","tags":["IDE工具","Eclipse"],"title":"Eclipse - 如何修改web项目的web module version","uri":"/posts/4e16194f.html/"},{"categories":["影评"],"content":" ReadyPlayerOne \" ReadyPlayerOne 这部电影国内译名又叫头号玩家、玩家一号，讲述的是在未来人们为了躲避一团糟的现实而沉迷于一个名为绿洲的现实虚拟游戏。 虽然这部电影并没有直接传达什么正能量的道理之类的，但是这部3D电影所展现出来的绿洲的奇妙与各种彩蛋却是令人看得目不暇接、直呼过瘾。这绝对是一部值得去电影院大饱眼福的爽快作品！ ","date":"2018-03-31","objectID":"/posts/23475.html/:0:0","tags":["影评","生活"],"title":"《Ready Player One》观后感","uri":"/posts/23475.html/"},{"categories":["影评"],"content":" 小萝莉的猴神大叔 \" 小萝莉的猴神大叔 今天去看了这部评分高达9.6分的印度电影，确实是挺好看的。这是讲述一个印度摩罗神信徒在没有护照和签证的情况下，不惜越过边境也要坚持将一个异国走失的哑巴小女孩送回巴基斯坦的父母家里的故事。印巴两国之间的仇恨，迥异的宗教信仰、森严的种姓制度都令我印象深刻。 就算是宗教信仰不同，也不应当局限于各自的神明教义，神明传播于世间的是爱，而不是仇恨，不同的宗教信仰，也是有着共通的点。而上一代人的仇恨，也不应归结到下一代的孩子身上。仇恨的故事固然吸引眼球，但是爱的故事更应该被关注传颂。 对于印巴两国的大人来说，对方即是邪恶，但是战争本就如此，不存在绝对的正义与邪恶，只有恪守信仰、遵从心中那杆爱与公正的天秤的一方，才是真正无愧于心的正义者。 ","date":"2018-03-17","objectID":"/posts/73.html/:0:0","tags":["影评","生活"],"title":"《小萝莉的猴神大叔》观后感","uri":"/posts/73.html/"},{"categories":["Eclipse"],"content":"情景 Eclipse如果更换一个新的工作空间，需要重新设置视图、配置等一系列东西，算是想到麻烦的一件事情，其实我们完全可以将旧的工作空间里的配置拷贝到新的工作空间里，这样就可以省去重新配置的麻烦了~ 具体操作如下： 在${workspace(你电脑里原本的工作空间目录)}/.metadata/.plugins里有这样两个文件夹：org.eclipse.core.runtime和org.eclipse.ui.workbench，将新的工作空间里的同名文件夹删了，再将这两个文件夹复制到新的工作空间就行了！ org.eclipse.core.runtime：保存着Eclipse的用户配置，包括视图、编码、各种插件的配置(window下的preference里边的插件配置)等 org.eclipse.ui.workbench：保持着ui上的配置，包括上方的快捷工具栏和下方的view窗口等 如果不知道自己正在使用的工作空间在哪个目录下，请点击Eclipse左上角的File→switch workspace→other，显示的就是当前工作空间的目录。另外，在这里有个copy setting，可以选择转换到新的工作空间时拷贝原本的配置，但这里拷贝的其实只是org.eclipse.ui.workbench，缺少了org.eclipse.core.runtime，所以这种方法会丢失部分配置。 另外不要没事就随便转换工作空间，Eclipse容易崩溃_(:3」∠)_ ","date":"2017-09-15","objectID":"/posts/3084e42f.html/:1:0","tags":["IDE工具","Eclipse"],"title":"Eclipse - 如何在新的工作空间使用原来的配置(编码、视图、快捷键、插件设置等)","uri":"/posts/3084e42f.html/"},{"categories":["Eclipse"],"content":"配置方式 一共需要设置三个地方： Window-\u003ePreferences-\u003eGeneral -\u003eContent Type-\u003eText-\u003eJSP，在 最下面设置为UTF-8 Window-\u003ePreferences-\u003eGeneral-\u003eWorkspace，将Text file encoding 设置UTF-8 Window-\u003ePreferences-\u003eWeb-\u003eJSP Files，设置为 ISO 10646/Unicode(UTF-8) ","date":"2017-09-15","objectID":"/posts/c23cad48.html/:1:0","tags":["IDE工具","Eclipse"],"title":"Eclipse - 修改默认编码为utf-8","uri":"/posts/c23cad48.html/"},{"categories":["Eclipse"],"content":"配置方法 Eclipse的properties文件是默认ISO-8859-1编码的，如果在properties里输入中文会导致乱码，此时需要修改其编码为utf-8，具体步骤如下： Window→Preferences→General→Content Types→Text，然后单击Java Properties Files，选定下方的*.properties(locked)，接着将最下方的ISO-8859-1改为utf-8，然后点击旁边的 Update，最后点击OK。 ","date":"2017-07-17","objectID":"/posts/9cdb7e13.html/:1:0","tags":["IDE工具","Eclipse"],"title":"Eclipse - 修改properties文件的编码","uri":"/posts/9cdb7e13.html/"}]